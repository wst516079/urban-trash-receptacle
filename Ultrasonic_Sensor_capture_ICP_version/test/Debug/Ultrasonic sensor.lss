
Ultrasonic sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800100  00800100  00001414  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7f  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092f  00000000  00000000  00002283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ed  00000000  00000000  00002bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  000032a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000544  00000000  00000000  000034c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000491  00000000  00000000  00003a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003e99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	d1 c0       	rjmp	.+418    	; 0x1a8 <__bad_interrupt>
       6:	00 00       	nop
       8:	cf c0       	rjmp	.+414    	; 0x1a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	cd c0       	rjmp	.+410    	; 0x1a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	cb c0       	rjmp	.+406    	; 0x1a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	c9 c0       	rjmp	.+402    	; 0x1a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	c7 c0       	rjmp	.+398    	; 0x1a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c5 c0       	rjmp	.+394    	; 0x1a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c3 c0       	rjmp	.+390    	; 0x1a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	c1 c0       	rjmp	.+386    	; 0x1a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	bf c0       	rjmp	.+382    	; 0x1a8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bd c0       	rjmp	.+378    	; 0x1a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f5 c3       	rjmp	.+2026   	; 0x81c <__vector_12>
      32:	00 00       	nop
      34:	b9 c0       	rjmp	.+370    	; 0x1a8 <__bad_interrupt>
      36:	00 00       	nop
      38:	b7 c0       	rjmp	.+366    	; 0x1a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d5 c3       	rjmp	.+1962   	; 0x7e8 <__vector_15>
      3e:	00 00       	nop
      40:	b3 c0       	rjmp	.+358    	; 0x1a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	b1 c0       	rjmp	.+354    	; 0x1a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	af c0       	rjmp	.+350    	; 0x1a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ad c0       	rjmp	.+346    	; 0x1a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ab c0       	rjmp	.+342    	; 0x1a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	a9 c0       	rjmp	.+338    	; 0x1a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	a7 c0       	rjmp	.+334    	; 0x1a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a5 c0       	rjmp	.+330    	; 0x1a8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a3 c0       	rjmp	.+326    	; 0x1a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	a1 c0       	rjmp	.+322    	; 0x1a8 <__bad_interrupt>
      66:	00 00       	nop
      68:	9f c0       	rjmp	.+318    	; 0x1a8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9d c0       	rjmp	.+314    	; 0x1a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9b c0       	rjmp	.+310    	; 0x1a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	99 c0       	rjmp	.+306    	; 0x1a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	97 c0       	rjmp	.+302    	; 0x1a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	95 c0       	rjmp	.+298    	; 0x1a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	93 c0       	rjmp	.+294    	; 0x1a8 <__bad_interrupt>
      82:	00 00       	nop
      84:	91 c0       	rjmp	.+290    	; 0x1a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	8f c0       	rjmp	.+286    	; 0x1a8 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	00 40       	sbci	r16, 0x00	; 0
      8e:	7a 10       	cpse	r7, r10
      90:	f3 5a       	subi	r31, 0xA3	; 163
      92:	00 a0       	ldd	r0, Z+32	; 0x20
      94:	72 4e       	sbci	r23, 0xE2	; 226
      96:	18 09       	sbc	r17, r8
      98:	00 10       	cpse	r0, r0
      9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <main+0x34>
      9c:	e8 00       	.word	0x00e8	; ????
      9e:	00 e8       	ldi	r16, 0x80	; 128
      a0:	76 48       	sbci	r23, 0x86	; 134
      a2:	17 00       	.word	0x0017	; ????
      a4:	00 e4       	ldi	r16, 0x40	; 64
      a6:	0b 54       	subi	r16, 0x4B	; 75
      a8:	02 00       	.word	0x0002	; ????
      aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
      ac:	9a 3b       	cpi	r25, 0xBA	; 186
      ae:	00 00       	nop
      b0:	00 e1       	ldi	r16, 0x10	; 16
      b2:	f5 05       	cpc	r31, r5
      b4:	00 00       	nop
      b6:	80 96       	adiw	r24, 0x20	; 32
      b8:	98 00       	.word	0x0098	; ????
      ba:	00 00       	nop
      bc:	40 42       	sbci	r20, 0x20	; 32
      be:	0f 00       	.word	0x000f	; ????
      c0:	00 00       	nop
      c2:	a0 86       	std	Z+8, r10	; 0x08
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	10 27       	eor	r17, r16
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	e8 03       	fmulsu	r22, r16
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	64 00       	.word	0x0064	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	0a 00       	.word	0x000a	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	2c 76       	andi	r18, 0x6C	; 108
      e8:	d8 88       	ldd	r13, Y+16	; 0x10
      ea:	dc 67       	ori	r29, 0x7C	; 124
      ec:	4f 08       	sbc	r4, r15
      ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
      f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
      f2:	ae 59       	subi	r26, 0x9E	; 158
      f4:	e1 b1       	in	r30, 0x01	; 1
      f6:	b7 96       	adiw	r30, 0x27	; 39
      f8:	e5 e3       	ldi	r30, 0x35	; 53
      fa:	e4 53       	subi	r30, 0x34	; 52
      fc:	c6 3a       	cpi	r28, 0xA6	; 166
      fe:	e6 51       	subi	r30, 0x16	; 22
     100:	99 76       	andi	r25, 0x69	; 105
     102:	96 e8       	ldi	r25, 0x86	; 134
     104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <trigger+0x2ce>
     106:	84 26       	eor	r8, r20
     108:	eb 89       	ldd	r30, Y+19	; 0x13
     10a:	8c 9b       	sbis	0x11, 4	; 17
     10c:	62 ed       	ldi	r22, 0xD2	; 210
     10e:	40 7c       	andi	r20, 0xC0	; 192
     110:	6f fc       	.word	0xfc6f	; ????
     112:	ef bc       	out	0x2f, r14	; 47
     114:	9c 9f       	mul	r25, r28
     116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
     118:	ba a5       	ldd	r27, Y+42	; 0x2a
     11a:	6f a5       	ldd	r22, Y+47	; 0x2f
     11c:	f4 90       	lpm	r15, Z
     11e:	05 5a       	subi	r16, 0xA5	; 165
     120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
     122:	5c 93       	st	X, r21
     124:	6b 6c       	ori	r22, 0xCB	; 203
     126:	f9 67       	ori	r31, 0x79	; 121
     128:	6d c1       	rjmp	.+730    	; 0x404 <trigger>
     12a:	1b fc       	.word	0xfc1b	; ????
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	0d 47       	sbci	r16, 0x7D	; 125
     130:	fe f5       	brtc	.+126    	; 0x1b0 <LCD_ClearScreen+0x6>
     132:	20 e6       	ldi	r18, 0x60	; 96
     134:	b5 00       	.word	0x00b5	; ????
     136:	d0 ed       	ldi	r29, 0xD0	; 208
     138:	90 2e       	mov	r9, r16
     13a:	03 00       	.word	0x0003	; ????
     13c:	94 35       	cpi	r25, 0x54	; 84
     13e:	77 05       	cpc	r23, r7
     140:	00 80       	ld	r0, Z
     142:	84 1e       	adc	r8, r20
     144:	08 00       	.word	0x0008	; ????
     146:	00 20       	and	r0, r0
     148:	4e 0a       	sbc	r4, r30
     14a:	00 00       	nop
     14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
     14e:	0c 33       	cpi	r16, 0x3C	; 60
     150:	33 33       	cpi	r19, 0x33	; 51
     152:	33 0f       	add	r19, r19
     154:	98 6e       	ori	r25, 0xE8	; 232
     156:	12 83       	std	Z+2, r17	; 0x02
     158:	11 41       	sbci	r17, 0x11	; 17
     15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     15c:	21 14       	cp	r2, r1
     15e:	89 3b       	cpi	r24, 0xB9	; 185
     160:	e6 55       	subi	r30, 0x56	; 86
     162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
     164:	fe e6       	ldi	r31, 0x6E	; 110
     166:	db 18       	sub	r13, r11
     168:	d1 84       	ldd	r13, Z+9	; 0x09
     16a:	4b 38       	cpi	r20, 0x8B	; 139
     16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
     16e:	7c 1d       	adc	r23, r12
     170:	90 1d       	adc	r25, r0
     172:	a4 bb       	out	0x14, r26	; 20
     174:	e4 24       	eor	r14, r4
     176:	20 32       	cpi	r18, 0x20	; 32
     178:	84 72       	andi	r24, 0x24	; 36
     17a:	5e 22       	and	r5, r30
     17c:	81 00       	.word	0x0081	; ????
     17e:	c9 f1       	breq	.+114    	; 0x1f2 <LCD_WriteCommand+0x8>
     180:	24 ec       	ldi	r18, 0xC4	; 196
     182:	a1 e5       	ldi	r26, 0x51	; 81
     184:	3d 27       	eor	r19, r29

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d0 e4       	ldi	r29, 0x40	; 64
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_clear_bss>:
     192:	21 e0       	ldi	r18, 0x01	; 1
     194:	a0 e0       	ldi	r26, 0x00	; 0
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a7 31       	cpi	r26, 0x17	; 23
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
     1a2:	07 d4       	rcall	.+2062   	; 0x9b2 <main>
     1a4:	0c 94 ce 09 	jmp	0x139c	; 0x139c <_exit>

000001a8 <__bad_interrupt>:
     1a8:	2b cf       	rjmp	.-426    	; 0x0 <__vectors>

000001aa <LCD_ClearScreen>:
#define RS 5			// pin number of uC connected to pin 4 of LCD disp.             <-----------PIN number changed here, different with what given in class
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
   LCD_WriteCommand(0x01);
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	1a d0       	rcall	.+52     	; 0x1ea <LCD_WriteCommand>
}
     1b6:	00 00       	nop
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	08 95       	ret

000001be <LCD_init>:

void LCD_init(void) {
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62

    //wait for 100 ms.
	delay_ms(100);
     1c6:	84 e6       	ldi	r24, 0x64	; 100
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	ac d0       	rcall	.+344    	; 0x324 <delay_ms>
	LCD_WriteCommand(0x38);
     1cc:	88 e3       	ldi	r24, 0x38	; 56
     1ce:	0d d0       	rcall	.+26     	; 0x1ea <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
     1d0:	86 e0       	ldi	r24, 0x06	; 6
     1d2:	0b d0       	rcall	.+22     	; 0x1ea <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
     1d4:	8f e0       	ldi	r24, 0x0F	; 15
     1d6:	09 d0       	rcall	.+18     	; 0x1ea <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	07 d0       	rcall	.+14     	; 0x1ea <LCD_WriteCommand>
	delay_ms(10);						 
     1dc:	8a e0       	ldi	r24, 0x0A	; 10
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	a1 d0       	rcall	.+322    	; 0x324 <delay_ms>
     1e2:	00 00       	nop
}
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <LCD_WriteCommand>:
     1ea:	cf 93       	push	r28

void LCD_WriteCommand (unsigned char Command) {
     1ec:	df 93       	push	r29
     1ee:	1f 92       	push	r1
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	89 83       	std	Y+1, r24	; 0x01
   CLR_BIT(CONTROL_BUS,RS);
     1f6:	8b e2       	ldi	r24, 0x2B	; 43
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	2b e2       	ldi	r18, 0x2B	; 43
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	f9 01       	movw	r30, r18
     200:	20 81       	ld	r18, Z
     202:	2f 7d       	andi	r18, 0xDF	; 223
     204:	fc 01       	movw	r30, r24
     206:	20 83       	st	Z, r18
   DATA_BUS = Command;
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	29 81       	ldd	r18, Y+1	; 0x01
     20e:	fc 01       	movw	r30, r24
     210:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
     212:	8b e2       	ldi	r24, 0x2B	; 43
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	2b e2       	ldi	r18, 0x2B	; 43
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	f9 01       	movw	r30, r18
     21c:	20 81       	ld	r18, Z
     21e:	20 68       	ori	r18, 0x80	; 128
     220:	fc 01       	movw	r30, r24
     222:	20 83       	st	Z, r18
   asm("nop");
     224:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     226:	8b e2       	ldi	r24, 0x2B	; 43
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	2b e2       	ldi	r18, 0x2B	; 43
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	f9 01       	movw	r30, r18
     230:	20 81       	ld	r18, Z
     232:	2f 77       	andi	r18, 0x7F	; 127
     234:	fc 01       	movw	r30, r24
     236:	20 83       	st	Z, r18
   delay_ms(2); // ClearScreen requires 1.52ms to execute
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	73 d0       	rcall	.+230    	; 0x324 <delay_ms>
}
     23e:	00 00       	nop
     240:	0f 90       	pop	r0
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	08 95       	ret

00000248 <LCD_WriteData>:

void LCD_WriteData(unsigned char Data) {
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	1f 92       	push	r1
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	89 83       	std	Y+1, r24	; 0x01
   SET_BIT(CONTROL_BUS,RS);
     254:	8b e2       	ldi	r24, 0x2B	; 43
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	2b e2       	ldi	r18, 0x2B	; 43
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	f9 01       	movw	r30, r18
     25e:	20 81       	ld	r18, Z
     260:	20 62       	ori	r18, 0x20	; 32
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
   DATA_BUS = Data;
     266:	88 e2       	ldi	r24, 0x28	; 40
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	29 81       	ldd	r18, Y+1	; 0x01
     26c:	fc 01       	movw	r30, r24
     26e:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
     270:	8b e2       	ldi	r24, 0x2B	; 43
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	2b e2       	ldi	r18, 0x2B	; 43
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	f9 01       	movw	r30, r18
     27a:	20 81       	ld	r18, Z
     27c:	20 68       	ori	r18, 0x80	; 128
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
   asm("nop");
     282:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     284:	8b e2       	ldi	r24, 0x2B	; 43
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	2b e2       	ldi	r18, 0x2B	; 43
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	f9 01       	movw	r30, r18
     28e:	20 81       	ld	r18, Z
     290:	2f 77       	andi	r18, 0x7F	; 127
     292:	fc 01       	movw	r30, r24
     294:	20 83       	st	Z, r18
   delay_ms(1);
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	44 d0       	rcall	.+136    	; 0x324 <delay_ms>
}
     29c:	00 00       	nop
     29e:	0f 90       	pop	r0
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <LCD_DisplayString>:

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <LCD_DisplayString+0x6>
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <LCD_DisplayString+0x8>
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	8a 83       	std	Y+2, r24	; 0x02
     2b4:	7c 83       	std	Y+4, r23	; 0x04
     2b6:	6b 83       	std	Y+3, r22	; 0x03
   LCD_ClearScreen();
     2b8:	78 df       	rcall	.-272    	; 0x1aa <LCD_ClearScreen>
   unsigned char c = column;
     2ba:	8a 81       	ldd	r24, Y+2	; 0x02
     2bc:	89 83       	std	Y+1, r24	; 0x01
   while(*string) {
     2be:	0f c0       	rjmp	.+30     	; 0x2de <LCD_DisplayString+0x38>
      LCD_Cursor(c++);
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	98 0f       	add	r25, r24
     2c6:	99 83       	std	Y+1, r25	; 0x01
     2c8:	18 d0       	rcall	.+48     	; 0x2fa <LCD_Cursor>
      LCD_WriteData(*string++);
     2ca:	8b 81       	ldd	r24, Y+3	; 0x03
     2cc:	9c 81       	ldd	r25, Y+4	; 0x04
     2ce:	9c 01       	movw	r18, r24
     2d0:	2f 5f       	subi	r18, 0xFF	; 255
     2d2:	3f 4f       	sbci	r19, 0xFF	; 255
     2d4:	3c 83       	std	Y+4, r19	; 0x04
     2d6:	2b 83       	std	Y+3, r18	; 0x03
     2d8:	fc 01       	movw	r30, r24
     2da:	80 81       	ld	r24, Z
     2dc:	b5 df       	rcall	.-150    	; 0x248 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	9c 81       	ldd	r25, Y+4	; 0x04
     2e2:	fc 01       	movw	r30, r24
     2e4:	80 81       	ld	r24, Z
     2e6:	88 23       	and	r24, r24
     2e8:	59 f7       	brne	.-42     	; 0x2c0 <LCD_DisplayString+0x1a>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
     2ea:	00 00       	nop
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <LCD_Cursor>:

void LCD_Cursor(unsigned char column) {
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	1f 92       	push	r1
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	89 83       	std	Y+1, r24	; 0x01
   if ( column < 17 ) { // 16x1 LCD: column < 9
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	81 31       	cpi	r24, 0x11	; 17
     30a:	20 f4       	brcc	.+8      	; 0x314 <LCD_Cursor+0x1a>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	81 58       	subi	r24, 0x81	; 129
     310:	6c df       	rcall	.-296    	; 0x1ea <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
											// 16x2 LCD: column - 9
   }
}
     312:	03 c0       	rjmp	.+6      	; 0x31a <LCD_Cursor+0x20>
void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	81 55       	subi	r24, 0x51	; 81
     318:	68 df       	rcall	.-304    	; 0x1ea <LCD_WriteCommand>
											// 16x2 LCD: column - 9
   }
}
     31a:	00 00       	nop
     31c:	0f 90       	pop	r0
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	00 d0       	rcall	.+0      	; 0x32a <delay_ms+0x6>
     32a:	00 d0       	rcall	.+0      	; 0x32c <delay_ms+0x8>
     32c:	00 d0       	rcall	.+0      	; 0x32e <delay_ms+0xa>
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	9e 83       	std	Y+6, r25	; 0x06
     334:	8d 83       	std	Y+5, r24	; 0x05
    int i,j;
    for(i=0;i<miliSec;i++)
     336:	1a 82       	std	Y+2, r1	; 0x02
     338:	19 82       	std	Y+1, r1	; 0x01
     33a:	13 c0       	rjmp	.+38     	; 0x362 <delay_ms+0x3e>
    for(j=0;j<775;j++)
     33c:	1c 82       	std	Y+4, r1	; 0x04
     33e:	1b 82       	std	Y+3, r1	; 0x03
     340:	06 c0       	rjmp	.+12     	; 0x34e <delay_ms+0x2a>
  {
   asm("nop");
     342:	00 00       	nop
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	9c 83       	std	Y+4, r25	; 0x04
     34c:	8b 83       	std	Y+3, r24	; 0x03
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	9c 81       	ldd	r25, Y+4	; 0x04
     352:	87 30       	cpi	r24, 0x07	; 7
     354:	93 40       	sbci	r25, 0x03	; 3
     356:	ac f3       	brlt	.-22     	; 0x342 <delay_ms+0x1e>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	9a 83       	std	Y+2, r25	; 0x02
     360:	89 83       	std	Y+1, r24	; 0x01
     362:	29 81       	ldd	r18, Y+1	; 0x01
     364:	3a 81       	ldd	r19, Y+2	; 0x02
     366:	8d 81       	ldd	r24, Y+5	; 0x05
     368:	9e 81       	ldd	r25, Y+6	; 0x06
     36a:	28 17       	cp	r18, r24
     36c:	39 07       	cpc	r19, r25
     36e:	34 f3       	brlt	.-52     	; 0x33c <delay_ms+0x18>
    for(j=0;j<775;j++)
  {
   asm("nop");
  }
}
     370:	00 00       	nop
     372:	26 96       	adiw	r28, 0x06	; 6
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <SetBit>:
unsigned char ov_counter;
unsigned int rising_edge,falling_edge;
unsigned long pulse_clocks;
double distance;

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b){
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <SetBit+0x6>
     38a:	1f 92       	push	r1
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	89 83       	std	Y+1, r24	; 0x01
     392:	6a 83       	std	Y+2, r22	; 0x02
     394:	4b 83       	std	Y+3, r20	; 0x03
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	88 23       	and	r24, r24
     39a:	71 f0       	breq	.+28     	; 0x3b8 <SetBit+0x34>
     39c:	8a 81       	ldd	r24, Y+2	; 0x02
     39e:	28 2f       	mov	r18, r24
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <SetBit+0x28>
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	2a 95       	dec	r18
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <SetBit+0x24>
     3b0:	98 2f       	mov	r25, r24
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	89 2b       	or	r24, r25
     3b6:	0e c0       	rjmp	.+28     	; 0x3d4 <SetBit+0x50>
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	28 2f       	mov	r18, r24
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <SetBit+0x44>
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	2a 95       	dec	r18
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <SetBit+0x40>
     3cc:	98 2f       	mov	r25, r24
     3ce:	90 95       	com	r25
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	89 23       	and	r24, r25
}
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <init>:

void init(){
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0x42; //init timer1, prescale 1/8, set the positive edge as trigger
     3e8:	81 e8       	ldi	r24, 0x81	; 129
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	22 e4       	ldi	r18, 0x42	; 66
     3ee:	fc 01       	movw	r30, r24
     3f0:	20 83       	st	Z, r18
    
    TIMSK1=0x21; //allow timer1 overflow interrupt and capture interrupt
     3f2:	8f e6       	ldi	r24, 0x6F	; 111
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	21 e2       	ldi	r18, 0x21	; 33
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 83       	st	Z, r18
}
     3fc:	00 00       	nop
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <trigger>:
void trigger(){
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	c0 54       	subi	r28, 0x40	; 64
     40e:	d1 09       	sbc	r29, r1
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
		PORTA = 0x00;    // trigger the sensor
     41a:	82 e2       	ldi	r24, 0x22	; 34
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	fc 01       	movw	r30, r24
     420:	10 82       	st	Z, r1
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	a0 e0       	ldi	r26, 0x00	; 0
     428:	b0 e4       	ldi	r27, 0x40	; 64
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	9a 83       	std	Y+2, r25	; 0x02
     42e:	ab 83       	std	Y+3, r26	; 0x03
     430:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     432:	2b ea       	ldi	r18, 0xAB	; 171
     434:	3a ea       	ldi	r19, 0xAA	; 170
     436:	4a ea       	ldi	r20, 0xAA	; 170
     438:	5e e3       	ldi	r21, 0x3E	; 62
     43a:	69 81       	ldd	r22, Y+1	; 0x01
     43c:	7a 81       	ldd	r23, Y+2	; 0x02
     43e:	8b 81       	ldd	r24, Y+3	; 0x03
     440:	9c 81       	ldd	r25, Y+4	; 0x04
     442:	ba d4       	rcall	.+2420   	; 0xdb8 <__mulsf3>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	8d a3       	std	Y+37, r24	; 0x25
     44a:	9e a3       	std	Y+38, r25	; 0x26
     44c:	af a3       	std	Y+39, r26	; 0x27
     44e:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e8       	ldi	r20, 0x80	; 128
     456:	5e e3       	ldi	r21, 0x3E	; 62
     458:	69 81       	ldd	r22, Y+1	; 0x01
     45a:	7a 81       	ldd	r23, Y+2	; 0x02
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	9c 81       	ldd	r25, Y+4	; 0x04
     460:	ab d4       	rcall	.+2390   	; 0xdb8 <__mulsf3>
     462:	dc 01       	movw	r26, r24
     464:	cb 01       	movw	r24, r22
     466:	89 a7       	std	Y+41, r24	; 0x29
     468:	9a a7       	std	Y+42, r25	; 0x2a
     46a:	ab a7       	std	Y+43, r26	; 0x2b
     46c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	40 e8       	ldi	r20, 0x80	; 128
     474:	5f e3       	ldi	r21, 0x3F	; 63
     476:	6d a1       	ldd	r22, Y+37	; 0x25
     478:	7e a1       	ldd	r23, Y+38	; 0x26
     47a:	8f a1       	ldd	r24, Y+39	; 0x27
     47c:	98 a5       	ldd	r25, Y+40	; 0x28
     47e:	4e d3       	rcall	.+1692   	; 0xb1c <__cmpsf2>
     480:	88 23       	and	r24, r24
     482:	1c f4       	brge	.+6      	; 0x48a <trigger+0x86>
		__ticks = 1;
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	8d a7       	std	Y+45, r24	; 0x2d
     488:	a7 c0       	rjmp	.+334    	; 0x5d8 <trigger+0x1d4>
	else if (__tmp2 > 65535)
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	3f ef       	ldi	r19, 0xFF	; 255
     48e:	4f e7       	ldi	r20, 0x7F	; 127
     490:	57 e4       	ldi	r21, 0x47	; 71
     492:	69 a5       	ldd	r22, Y+41	; 0x29
     494:	7a a5       	ldd	r23, Y+42	; 0x2a
     496:	8b a5       	ldd	r24, Y+43	; 0x2b
     498:	9c a5       	ldd	r25, Y+44	; 0x2c
     49a:	8a d4       	rcall	.+2324   	; 0xdb0 <__gesf2>
     49c:	18 16       	cp	r1, r24
     49e:	0c f0       	brlt	.+2      	; 0x4a2 <trigger+0x9e>
     4a0:	74 c0       	rjmp	.+232    	; 0x58a <trigger+0x186>
	{
		_delay_ms(__us / 1000.0);
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	4a e7       	ldi	r20, 0x7A	; 122
     4a8:	54 e4       	ldi	r21, 0x44	; 68
     4aa:	69 81       	ldd	r22, Y+1	; 0x01
     4ac:	7a 81       	ldd	r23, Y+2	; 0x02
     4ae:	8b 81       	ldd	r24, Y+3	; 0x03
     4b0:	9c 81       	ldd	r25, Y+4	; 0x04
     4b2:	38 d3       	rcall	.+1648   	; 0xb24 <__divsf3>
     4b4:	dc 01       	movw	r26, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	8e a7       	std	Y+46, r24	; 0x2e
     4ba:	9f a7       	std	Y+47, r25	; 0x2f
     4bc:	a8 ab       	std	Y+48, r26	; 0x30
     4be:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	4a e7       	ldi	r20, 0x7A	; 122
     4c6:	53 e4       	ldi	r21, 0x43	; 67
     4c8:	6e a5       	ldd	r22, Y+46	; 0x2e
     4ca:	7f a5       	ldd	r23, Y+47	; 0x2f
     4cc:	88 a9       	ldd	r24, Y+48	; 0x30
     4ce:	99 a9       	ldd	r25, Y+49	; 0x31
     4d0:	73 d4       	rcall	.+2278   	; 0xdb8 <__mulsf3>
     4d2:	dc 01       	movw	r26, r24
     4d4:	cb 01       	movw	r24, r22
     4d6:	8a ab       	std	Y+50, r24	; 0x32
     4d8:	9b ab       	std	Y+51, r25	; 0x33
     4da:	ac ab       	std	Y+52, r26	; 0x34
     4dc:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	40 e8       	ldi	r20, 0x80	; 128
     4e4:	5f e3       	ldi	r21, 0x3F	; 63
     4e6:	6a a9       	ldd	r22, Y+50	; 0x32
     4e8:	7b a9       	ldd	r23, Y+51	; 0x33
     4ea:	8c a9       	ldd	r24, Y+52	; 0x34
     4ec:	9d a9       	ldd	r25, Y+53	; 0x35
     4ee:	16 d3       	rcall	.+1580   	; 0xb1c <__cmpsf2>
     4f0:	88 23       	and	r24, r24
     4f2:	2c f4       	brge	.+10     	; 0x4fe <trigger+0xfa>
		__ticks = 1;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	9f ab       	std	Y+55, r25	; 0x37
     4fa:	8e ab       	std	Y+54, r24	; 0x36
     4fc:	3b c0       	rjmp	.+118    	; 0x574 <trigger+0x170>
	else if (__tmp > 65535)
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	3f ef       	ldi	r19, 0xFF	; 255
     502:	4f e7       	ldi	r20, 0x7F	; 127
     504:	57 e4       	ldi	r21, 0x47	; 71
     506:	6a a9       	ldd	r22, Y+50	; 0x32
     508:	7b a9       	ldd	r23, Y+51	; 0x33
     50a:	8c a9       	ldd	r24, Y+52	; 0x34
     50c:	9d a9       	ldd	r25, Y+53	; 0x35
     50e:	50 d4       	rcall	.+2208   	; 0xdb0 <__gesf2>
     510:	18 16       	cp	r1, r24
     512:	3c f5       	brge	.+78     	; 0x562 <trigger+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	40 e2       	ldi	r20, 0x20	; 32
     51a:	51 e4       	ldi	r21, 0x41	; 65
     51c:	6e a5       	ldd	r22, Y+46	; 0x2e
     51e:	7f a5       	ldd	r23, Y+47	; 0x2f
     520:	88 a9       	ldd	r24, Y+48	; 0x30
     522:	99 a9       	ldd	r25, Y+49	; 0x31
     524:	49 d4       	rcall	.+2194   	; 0xdb8 <__mulsf3>
     526:	dc 01       	movw	r26, r24
     528:	cb 01       	movw	r24, r22
     52a:	bc 01       	movw	r22, r24
     52c:	cd 01       	movw	r24, r26
     52e:	62 d3       	rcall	.+1732   	; 0xbf4 <__fixunssfsi>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	9f ab       	std	Y+55, r25	; 0x37
     536:	8e ab       	std	Y+54, r24	; 0x36
     538:	0f c0       	rjmp	.+30     	; 0x558 <trigger+0x154>
     53a:	89 e1       	ldi	r24, 0x19	; 25
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	99 af       	std	Y+57, r25	; 0x39
     540:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     542:	88 ad       	ldd	r24, Y+56	; 0x38
     544:	99 ad       	ldd	r25, Y+57	; 0x39
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <trigger+0x142>
     54a:	99 af       	std	Y+57, r25	; 0x39
     54c:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     54e:	8e a9       	ldd	r24, Y+54	; 0x36
     550:	9f a9       	ldd	r25, Y+55	; 0x37
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	9f ab       	std	Y+55, r25	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     556:	8e ab       	std	Y+54, r24	; 0x36
     558:	8e a9       	ldd	r24, Y+54	; 0x36
     55a:	9f a9       	ldd	r25, Y+55	; 0x37
     55c:	89 2b       	or	r24, r25
     55e:	69 f7       	brne	.-38     	; 0x53a <trigger+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     560:	3b c0       	rjmp	.+118    	; 0x5d8 <trigger+0x1d4>
     562:	6a a9       	ldd	r22, Y+50	; 0x32
     564:	7b a9       	ldd	r23, Y+51	; 0x33
     566:	8c a9       	ldd	r24, Y+52	; 0x34
     568:	9d a9       	ldd	r25, Y+53	; 0x35
     56a:	44 d3       	rcall	.+1672   	; 0xbf4 <__fixunssfsi>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	9f ab       	std	Y+55, r25	; 0x37
     572:	8e ab       	std	Y+54, r24	; 0x36
     574:	8e a9       	ldd	r24, Y+54	; 0x36
     576:	9f a9       	ldd	r25, Y+55	; 0x37
     578:	9b af       	std	Y+59, r25	; 0x3b
     57a:	8a af       	std	Y+58, r24	; 0x3a
     57c:	8a ad       	ldd	r24, Y+58	; 0x3a
     57e:	9b ad       	ldd	r25, Y+59	; 0x3b
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <trigger+0x17c>
     584:	9b af       	std	Y+59, r25	; 0x3b
     586:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     588:	27 c0       	rjmp	.+78     	; 0x5d8 <trigger+0x1d4>
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	4f e7       	ldi	r20, 0x7F	; 127
     590:	53 e4       	ldi	r21, 0x43	; 67
     592:	6d a1       	ldd	r22, Y+37	; 0x25
     594:	7e a1       	ldd	r23, Y+38	; 0x26
     596:	8f a1       	ldd	r24, Y+39	; 0x27
     598:	98 a5       	ldd	r25, Y+40	; 0x28
     59a:	0a d4       	rcall	.+2068   	; 0xdb0 <__gesf2>
     59c:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     59e:	a4 f4       	brge	.+40     	; 0x5c8 <trigger+0x1c4>
     5a0:	69 a5       	ldd	r22, Y+41	; 0x29
     5a2:	7a a5       	ldd	r23, Y+42	; 0x2a
     5a4:	8b a5       	ldd	r24, Y+43	; 0x2b
     5a6:	9c a5       	ldd	r25, Y+44	; 0x2c
     5a8:	25 d3       	rcall	.+1610   	; 0xbf4 <__fixunssfsi>
     5aa:	dc 01       	movw	r26, r24
     5ac:	cb 01       	movw	r24, r22
     5ae:	9d af       	std	Y+61, r25	; 0x3d
     5b0:	8c af       	std	Y+60, r24	; 0x3c
     5b2:	8c ad       	ldd	r24, Y+60	; 0x3c
     5b4:	9d ad       	ldd	r25, Y+61	; 0x3d
     5b6:	9f af       	std	Y+63, r25	; 0x3f
     5b8:	8e af       	std	Y+62, r24	; 0x3e
     5ba:	8e ad       	ldd	r24, Y+62	; 0x3e
     5bc:	9f ad       	ldd	r25, Y+63	; 0x3f
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	f1 f7       	brne	.-4      	; 0x5be <trigger+0x1ba>
     5c2:	9f af       	std	Y+63, r25	; 0x3f
     5c4:	8e af       	std	Y+62, r24	; 0x3e
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5c6:	1b c0       	rjmp	.+54     	; 0x5fe <trigger+0x1fa>
     5c8:	6d a1       	ldd	r22, Y+37	; 0x25
     5ca:	7e a1       	ldd	r23, Y+38	; 0x26
     5cc:	8f a1       	ldd	r24, Y+39	; 0x27
     5ce:	98 a5       	ldd	r25, Y+40	; 0x28
     5d0:	11 d3       	rcall	.+1570   	; 0xbf4 <__fixunssfsi>
     5d2:	dc 01       	movw	r26, r24
     5d4:	cb 01       	movw	r24, r22
     5d6:	8d a7       	std	Y+45, r24	; 0x2d
     5d8:	2d a5       	ldd	r18, Y+45	; 0x2d
     5da:	ce 01       	movw	r24, r28
     5dc:	80 5c       	subi	r24, 0xC0	; 192
     5de:	9f 4f       	sbci	r25, 0xFF	; 255
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5e4:	ce 01       	movw	r24, r28
     5e6:	80 5c       	subi	r24, 0xC0	; 192
     5e8:	9f 4f       	sbci	r25, 0xFF	; 255
     5ea:	fc 01       	movw	r30, r24
     5ec:	80 81       	ld	r24, Z
     5ee:	28 2f       	mov	r18, r24
     5f0:	2a 95       	dec	r18
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <trigger+0x1ec>
     5f4:	ce 01       	movw	r24, r28
     5f6:	80 5c       	subi	r24, 0xC0	; 192
     5f8:	9f 4f       	sbci	r25, 0xFF	; 255
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18
        _delay_us(2);
        PORTA = 0x01;
     5fe:	82 e2       	ldi	r24, 0x22	; 34
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	fc 01       	movw	r30, r24
     606:	20 83       	st	Z, r18
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	a0 e2       	ldi	r26, 0x20	; 32
     60e:	b1 e4       	ldi	r27, 0x41	; 65
     610:	8d 83       	std	Y+5, r24	; 0x05
     612:	9e 83       	std	Y+6, r25	; 0x06
     614:	af 83       	std	Y+7, r26	; 0x07
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     616:	b8 87       	std	Y+8, r27	; 0x08
     618:	2b ea       	ldi	r18, 0xAB	; 171
     61a:	3a ea       	ldi	r19, 0xAA	; 170
     61c:	4a ea       	ldi	r20, 0xAA	; 170
     61e:	5e e3       	ldi	r21, 0x3E	; 62
     620:	6d 81       	ldd	r22, Y+5	; 0x05
     622:	7e 81       	ldd	r23, Y+6	; 0x06
     624:	8f 81       	ldd	r24, Y+7	; 0x07
     626:	98 85       	ldd	r25, Y+8	; 0x08
     628:	c7 d3       	rcall	.+1934   	; 0xdb8 <__mulsf3>
     62a:	dc 01       	movw	r26, r24
     62c:	cb 01       	movw	r24, r22
     62e:	89 87       	std	Y+9, r24	; 0x09
     630:	9a 87       	std	Y+10, r25	; 0x0a
     632:	ab 87       	std	Y+11, r26	; 0x0b
	__tmp2 = ((F_CPU) / 4e6) * __us;
     634:	bc 87       	std	Y+12, r27	; 0x0c
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e8       	ldi	r20, 0x80	; 128
     63c:	5e e3       	ldi	r21, 0x3E	; 62
     63e:	6d 81       	ldd	r22, Y+5	; 0x05
     640:	7e 81       	ldd	r23, Y+6	; 0x06
     642:	8f 81       	ldd	r24, Y+7	; 0x07
     644:	98 85       	ldd	r25, Y+8	; 0x08
     646:	b8 d3       	rcall	.+1904   	; 0xdb8 <__mulsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	8d 87       	std	Y+13, r24	; 0x0d
     64e:	9e 87       	std	Y+14, r25	; 0x0e
     650:	af 87       	std	Y+15, r26	; 0x0f
	if (__tmp < 1.0)
     652:	b8 8b       	std	Y+16, r27	; 0x10
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	40 e8       	ldi	r20, 0x80	; 128
     65a:	5f e3       	ldi	r21, 0x3F	; 63
     65c:	69 85       	ldd	r22, Y+9	; 0x09
     65e:	7a 85       	ldd	r23, Y+10	; 0x0a
     660:	8b 85       	ldd	r24, Y+11	; 0x0b
     662:	9c 85       	ldd	r25, Y+12	; 0x0c
     664:	5b d2       	rcall	.+1206   	; 0xb1c <__cmpsf2>
     666:	88 23       	and	r24, r24
		__ticks = 1;
     668:	1c f4       	brge	.+6      	; 0x670 <trigger+0x26c>
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	89 8b       	std	Y+17, r24	; 0x11
	else if (__tmp2 > 65535)
     66e:	a7 c0       	rjmp	.+334    	; 0x7be <trigger+0x3ba>
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	3f ef       	ldi	r19, 0xFF	; 255
     674:	4f e7       	ldi	r20, 0x7F	; 127
     676:	57 e4       	ldi	r21, 0x47	; 71
     678:	6d 85       	ldd	r22, Y+13	; 0x0d
     67a:	7e 85       	ldd	r23, Y+14	; 0x0e
     67c:	8f 85       	ldd	r24, Y+15	; 0x0f
     67e:	98 89       	ldd	r25, Y+16	; 0x10
     680:	97 d3       	rcall	.+1838   	; 0xdb0 <__gesf2>
     682:	18 16       	cp	r1, r24
     684:	0c f0       	brlt	.+2      	; 0x688 <trigger+0x284>
	{
		_delay_ms(__us / 1000.0);
     686:	74 c0       	rjmp	.+232    	; 0x770 <trigger+0x36c>
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	4a e7       	ldi	r20, 0x7A	; 122
     68e:	54 e4       	ldi	r21, 0x44	; 68
     690:	6d 81       	ldd	r22, Y+5	; 0x05
     692:	7e 81       	ldd	r23, Y+6	; 0x06
     694:	8f 81       	ldd	r24, Y+7	; 0x07
     696:	98 85       	ldd	r25, Y+8	; 0x08
     698:	45 d2       	rcall	.+1162   	; 0xb24 <__divsf3>
     69a:	dc 01       	movw	r26, r24
     69c:	cb 01       	movw	r24, r22
     69e:	8a 8b       	std	Y+18, r24	; 0x12
     6a0:	9b 8b       	std	Y+19, r25	; 0x13
     6a2:	ac 8b       	std	Y+20, r26	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6a4:	bd 8b       	std	Y+21, r27	; 0x15
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	4a e7       	ldi	r20, 0x7A	; 122
     6ac:	53 e4       	ldi	r21, 0x43	; 67
     6ae:	6a 89       	ldd	r22, Y+18	; 0x12
     6b0:	7b 89       	ldd	r23, Y+19	; 0x13
     6b2:	8c 89       	ldd	r24, Y+20	; 0x14
     6b4:	9d 89       	ldd	r25, Y+21	; 0x15
     6b6:	80 d3       	rcall	.+1792   	; 0xdb8 <__mulsf3>
     6b8:	dc 01       	movw	r26, r24
     6ba:	cb 01       	movw	r24, r22
     6bc:	8e 8b       	std	Y+22, r24	; 0x16
     6be:	9f 8b       	std	Y+23, r25	; 0x17
     6c0:	a8 8f       	std	Y+24, r26	; 0x18
	if (__tmp < 1.0)
     6c2:	b9 8f       	std	Y+25, r27	; 0x19
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e8       	ldi	r20, 0x80	; 128
     6ca:	5f e3       	ldi	r21, 0x3F	; 63
     6cc:	6e 89       	ldd	r22, Y+22	; 0x16
     6ce:	7f 89       	ldd	r23, Y+23	; 0x17
     6d0:	88 8d       	ldd	r24, Y+24	; 0x18
     6d2:	99 8d       	ldd	r25, Y+25	; 0x19
     6d4:	23 d2       	rcall	.+1094   	; 0xb1c <__cmpsf2>
     6d6:	88 23       	and	r24, r24
		__ticks = 1;
     6d8:	2c f4       	brge	.+10     	; 0x6e4 <trigger+0x2e0>
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	9b 8f       	std	Y+27, r25	; 0x1b
	else if (__tmp > 65535)
     6e0:	8a 8f       	std	Y+26, r24	; 0x1a
     6e2:	3b c0       	rjmp	.+118    	; 0x75a <trigger+0x356>
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	3f ef       	ldi	r19, 0xFF	; 255
     6e8:	4f e7       	ldi	r20, 0x7F	; 127
     6ea:	57 e4       	ldi	r21, 0x47	; 71
     6ec:	6e 89       	ldd	r22, Y+22	; 0x16
     6ee:	7f 89       	ldd	r23, Y+23	; 0x17
     6f0:	88 8d       	ldd	r24, Y+24	; 0x18
     6f2:	99 8d       	ldd	r25, Y+25	; 0x19
     6f4:	5d d3       	rcall	.+1722   	; 0xdb0 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f6:	18 16       	cp	r1, r24
     6f8:	3c f5       	brge	.+78     	; 0x748 <trigger+0x344>
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	40 e2       	ldi	r20, 0x20	; 32
     700:	51 e4       	ldi	r21, 0x41	; 65
     702:	6a 89       	ldd	r22, Y+18	; 0x12
     704:	7b 89       	ldd	r23, Y+19	; 0x13
     706:	8c 89       	ldd	r24, Y+20	; 0x14
     708:	9d 89       	ldd	r25, Y+21	; 0x15
     70a:	56 d3       	rcall	.+1708   	; 0xdb8 <__mulsf3>
     70c:	dc 01       	movw	r26, r24
     70e:	cb 01       	movw	r24, r22
     710:	bc 01       	movw	r22, r24
     712:	cd 01       	movw	r24, r26
     714:	6f d2       	rcall	.+1246   	; 0xbf4 <__fixunssfsi>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	9b 8f       	std	Y+27, r25	; 0x1b
     71c:	8a 8f       	std	Y+26, r24	; 0x1a
     71e:	0f c0       	rjmp	.+30     	; 0x73e <trigger+0x33a>
     720:	89 e1       	ldi	r24, 0x19	; 25
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	9d 8f       	std	Y+29, r25	; 0x1d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     726:	8c 8f       	std	Y+28, r24	; 0x1c
     728:	8c 8d       	ldd	r24, Y+28	; 0x1c
     72a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <trigger+0x328>
     730:	9d 8f       	std	Y+29, r25	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     732:	8c 8f       	std	Y+28, r24	; 0x1c
     734:	8a 8d       	ldd	r24, Y+26	; 0x1a
     736:	9b 8d       	ldd	r25, Y+27	; 0x1b
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	9b 8f       	std	Y+27, r25	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73c:	8a 8f       	std	Y+26, r24	; 0x1a
     73e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     740:	9b 8d       	ldd	r25, Y+27	; 0x1b
     742:	89 2b       	or	r24, r25
     744:	69 f7       	brne	.-38     	; 0x720 <trigger+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     746:	3b c0       	rjmp	.+118    	; 0x7be <trigger+0x3ba>
     748:	6e 89       	ldd	r22, Y+22	; 0x16
     74a:	7f 89       	ldd	r23, Y+23	; 0x17
     74c:	88 8d       	ldd	r24, Y+24	; 0x18
     74e:	99 8d       	ldd	r25, Y+25	; 0x19
     750:	51 d2       	rcall	.+1186   	; 0xbf4 <__fixunssfsi>
     752:	dc 01       	movw	r26, r24
     754:	cb 01       	movw	r24, r22
     756:	9b 8f       	std	Y+27, r25	; 0x1b
     758:	8a 8f       	std	Y+26, r24	; 0x1a
     75a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     75c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     75e:	9f 8f       	std	Y+31, r25	; 0x1f
     760:	8e 8f       	std	Y+30, r24	; 0x1e
     762:	8e 8d       	ldd	r24, Y+30	; 0x1e
     764:	9f 8d       	ldd	r25, Y+31	; 0x1f
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <trigger+0x362>
     76a:	9f 8f       	std	Y+31, r25	; 0x1f
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     76c:	8e 8f       	std	Y+30, r24	; 0x1e
     76e:	27 c0       	rjmp	.+78     	; 0x7be <trigger+0x3ba>
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	4f e7       	ldi	r20, 0x7F	; 127
     776:	53 e4       	ldi	r21, 0x43	; 67
     778:	69 85       	ldd	r22, Y+9	; 0x09
     77a:	7a 85       	ldd	r23, Y+10	; 0x0a
     77c:	8b 85       	ldd	r24, Y+11	; 0x0b
     77e:	9c 85       	ldd	r25, Y+12	; 0x0c
     780:	17 d3       	rcall	.+1582   	; 0xdb0 <__gesf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     782:	18 16       	cp	r1, r24
     784:	a4 f4       	brge	.+40     	; 0x7ae <trigger+0x3aa>
     786:	6d 85       	ldd	r22, Y+13	; 0x0d
     788:	7e 85       	ldd	r23, Y+14	; 0x0e
     78a:	8f 85       	ldd	r24, Y+15	; 0x0f
     78c:	98 89       	ldd	r25, Y+16	; 0x10
     78e:	32 d2       	rcall	.+1124   	; 0xbf4 <__fixunssfsi>
     790:	dc 01       	movw	r26, r24
     792:	cb 01       	movw	r24, r22
     794:	99 a3       	std	Y+33, r25	; 0x21
     796:	88 a3       	std	Y+32, r24	; 0x20
     798:	88 a1       	ldd	r24, Y+32	; 0x20
     79a:	99 a1       	ldd	r25, Y+33	; 0x21
     79c:	9b a3       	std	Y+35, r25	; 0x23
     79e:	8a a3       	std	Y+34, r24	; 0x22
     7a0:	8a a1       	ldd	r24, Y+34	; 0x22
     7a2:	9b a1       	ldd	r25, Y+35	; 0x23
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <trigger+0x3a0>
     7a8:	9b a3       	std	Y+35, r25	; 0x23
     7aa:	8a a3       	std	Y+34, r24	; 0x22
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     7ac:	0e c0       	rjmp	.+28     	; 0x7ca <trigger+0x3c6>
     7ae:	69 85       	ldd	r22, Y+9	; 0x09
     7b0:	7a 85       	ldd	r23, Y+10	; 0x0a
     7b2:	8b 85       	ldd	r24, Y+11	; 0x0b
     7b4:	9c 85       	ldd	r25, Y+12	; 0x0c
     7b6:	1e d2       	rcall	.+1084   	; 0xbf4 <__fixunssfsi>
     7b8:	dc 01       	movw	r26, r24
     7ba:	cb 01       	movw	r24, r22
     7bc:	89 8b       	std	Y+17, r24	; 0x11
     7be:	89 89       	ldd	r24, Y+17	; 0x11
     7c0:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7c2:	8c a1       	ldd	r24, Y+36	; 0x24
     7c4:	8a 95       	dec	r24
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <trigger+0x3c0>
     7c8:	8c a3       	std	Y+36, r24	; 0x24
        _delay_us(10);
        PORTA = 0x00;
     7ca:	82 e2       	ldi	r24, 0x22	; 34
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	fc 01       	movw	r30, r24
     7d0:	10 82       	st	Z, r1
}
     7d2:	00 00       	nop
     7d4:	c0 5c       	subi	r28, 0xC0	; 192
     7d6:	df 4f       	sbci	r29, 0xFF	; 255
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <__vector_15>:


ISR(_VECTOR(15))               //overflow interrupt
{
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	8f 93       	push	r24
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
    ov_counter++; 
     7fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     802:	8f 5f       	subi	r24, 0xFF	; 255
     804:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

}
     808:	00 00       	nop
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	8f 91       	pop	r24
     810:	0f 90       	pop	r0
     812:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <__vector_12>:


ISR(_VECTOR(12))                 // Input Capture Interrupt
{
     81c:	1f 92       	push	r1
     81e:	0f 92       	push	r0
     820:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     82c:	0f 92       	push	r0
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	2f 93       	push	r18
     838:	3f 93       	push	r19
     83a:	4f 93       	push	r20
     83c:	5f 93       	push	r21
     83e:	6f 93       	push	r22
     840:	7f 93       	push	r23
     842:	8f 93       	push	r24
     844:	9f 93       	push	r25
     846:	af 93       	push	r26
     848:	bf 93       	push	r27
     84a:	ef 93       	push	r30
     84c:	ff 93       	push	r31
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
    if (ICP1)
     856:	89 e2       	ldi	r24, 0x29	; 41
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	fc 01       	movw	r30, r24
     85c:	80 81       	ld	r24, Z
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 74       	andi	r24, 0x40	; 64
     864:	99 27       	eor	r25, r25
     866:	89 2b       	or	r24, r25
     868:	b9 f0       	breq	.+46     	; 0x898 <__vector_12+0x7c>
    { 
        rising_edge = ICR1;                                     //save the positive Edge         
     86a:	86 e8       	ldi	r24, 0x86	; 134
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	fc 01       	movw	r30, r24
     870:	80 81       	ld	r24, Z
     872:	91 81       	ldd	r25, Z+1	; 0x01
     874:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <rising_edge+0x1>
     878:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <rising_edge>
        TCCR1B = SetBit(TCCR1B,6,0);                            //set the negative edge as trigger
     87c:	01 e8       	ldi	r16, 0x81	; 129
     87e:	10 e0       	ldi	r17, 0x00	; 0
     880:	81 e8       	ldi	r24, 0x81	; 129
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	fc 01       	movw	r30, r24
     886:	80 81       	ld	r24, Z
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	66 e0       	ldi	r22, 0x06	; 6
     88c:	7b dd       	rcall	.-1290   	; 0x384 <SetBit>
     88e:	f8 01       	movw	r30, r16
     890:	80 83       	st	Z, r24
        ov_counter = 0;                                   //set overflow counter to 0
     892:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
        TCCR1B = SetBit(TCCR1B,6,1);                           //set the positive edge as trigger
        pulse_clocks = (unsigned long)falling_edge - (unsigned long)rising_edge + (unsigned long)ov_counter * 16 / 1000; //calculate the pulse width [number of pulse between positive and negative edge, plus number of overflow multiplied by bit wide then divided by the number of pulse in one millisecond]
		distance = pulse_clocks * 0.017;
	}

}
     896:	71 c0       	rjmp	.+226    	; 0x97a <__vector_12+0x15e>
        ov_counter = 0;                                   //set overflow counter to 0
        
    }
    else
    { 
        falling_edge = ICR1;                         //save the negative Edge
     898:	86 e8       	ldi	r24, 0x86	; 134
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	fc 01       	movw	r30, r24
     89e:	80 81       	ld	r24, Z
     8a0:	91 81       	ldd	r25, Z+1	; 0x01
     8a2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <falling_edge+0x1>
     8a6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <falling_edge>
        TCCR1B = SetBit(TCCR1B,6,1);                           //set the positive edge as trigger
     8aa:	01 e8       	ldi	r16, 0x81	; 129
     8ac:	10 e0       	ldi	r17, 0x00	; 0
     8ae:	81 e8       	ldi	r24, 0x81	; 129
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	fc 01       	movw	r30, r24
     8b4:	80 81       	ld	r24, Z
     8b6:	41 e0       	ldi	r20, 0x01	; 1
     8b8:	66 e0       	ldi	r22, 0x06	; 6
     8ba:	64 dd       	rcall	.-1336   	; 0x384 <SetBit>
     8bc:	f8 01       	movw	r30, r16
     8be:	80 83       	st	Z, r24
        pulse_clocks = (unsigned long)falling_edge - (unsigned long)rising_edge + (unsigned long)ov_counter * 16 / 1000; //calculate the pulse width [number of pulse between positive and negative edge, plus number of overflow multiplied by bit wide then divided by the number of pulse in one millisecond]
     8c0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <falling_edge>
     8c4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <falling_edge+0x1>
     8c8:	9c 01       	movw	r18, r24
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <rising_edge>
     8d2:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <rising_edge+0x1>
     8d6:	cc 01       	movw	r24, r24
     8d8:	a0 e0       	ldi	r26, 0x00	; 0
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	79 01       	movw	r14, r18
     8de:	8a 01       	movw	r16, r20
     8e0:	e8 1a       	sub	r14, r24
     8e2:	f9 0a       	sbc	r15, r25
     8e4:	0a 0b       	sbc	r16, r26
     8e6:	1b 0b       	sbc	r17, r27
     8e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     8ec:	88 2f       	mov	r24, r24
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	aa 1f       	adc	r26, r26
     8fa:	bb 1f       	adc	r27, r27
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	aa 1f       	adc	r26, r26
     902:	bb 1f       	adc	r27, r27
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	aa 1f       	adc	r26, r26
     90a:	bb 1f       	adc	r27, r27
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	aa 1f       	adc	r26, r26
     912:	bb 1f       	adc	r27, r27
     914:	28 ee       	ldi	r18, 0xE8	; 232
     916:	33 e0       	ldi	r19, 0x03	; 3
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	bc 01       	movw	r22, r24
     91e:	cd 01       	movw	r24, r26
     920:	ae d2       	rcall	.+1372   	; 0xe7e <__udivmodsi4>
     922:	da 01       	movw	r26, r20
     924:	c9 01       	movw	r24, r18
     926:	8e 0d       	add	r24, r14
     928:	9f 1d       	adc	r25, r15
     92a:	a0 1f       	adc	r26, r16
     92c:	b1 1f       	adc	r27, r17
     92e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pulse_clocks>
     932:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <pulse_clocks+0x1>
     936:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <pulse_clocks+0x2>
     93a:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <pulse_clocks+0x3>
		distance = pulse_clocks * 0.017;
     93e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pulse_clocks>
     942:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <pulse_clocks+0x1>
     946:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <pulse_clocks+0x2>
     94a:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <pulse_clocks+0x3>
     94e:	bc 01       	movw	r22, r24
     950:	cd 01       	movw	r24, r26
     952:	7c d1       	rcall	.+760    	; 0xc4c <__floatunsisf>
     954:	dc 01       	movw	r26, r24
     956:	cb 01       	movw	r24, r22
     958:	26 e9       	ldi	r18, 0x96	; 150
     95a:	33 e4       	ldi	r19, 0x43	; 67
     95c:	4b e8       	ldi	r20, 0x8B	; 139
     95e:	5c e3       	ldi	r21, 0x3C	; 60
     960:	bc 01       	movw	r22, r24
     962:	cd 01       	movw	r24, r26
     964:	29 d2       	rcall	.+1106   	; 0xdb8 <__mulsf3>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <distance>
     96e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <distance+0x1>
     972:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <distance+0x2>
     976:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <distance+0x3>
	}

}
     97a:	00 00       	nop
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	ff 91       	pop	r31
     982:	ef 91       	pop	r30
     984:	bf 91       	pop	r27
     986:	af 91       	pop	r26
     988:	9f 91       	pop	r25
     98a:	8f 91       	pop	r24
     98c:	7f 91       	pop	r23
     98e:	6f 91       	pop	r22
     990:	5f 91       	pop	r21
     992:	4f 91       	pop	r20
     994:	3f 91       	pop	r19
     996:	2f 91       	pop	r18
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	0f 90       	pop	r0
     9a2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     9a6:	0f 90       	pop	r0
     9a8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <main>:
char string[10];



int main(void)
{
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	2e 97       	sbiw	r28, 0x0e	; 14
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0xFF; PORTA = 0x00;
     9ca:	81 e2       	ldi	r24, 0x21	; 33
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	2f ef       	ldi	r18, 0xFF	; 255
     9d0:	fc 01       	movw	r30, r24
     9d2:	20 83       	st	Z, r18
     9d4:	82 e2       	ldi	r24, 0x22	; 34
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	fc 01       	movw	r30, r24
     9da:	10 82       	st	Z, r1
    DDRB = 0xFF; PORTB = 0x00;
     9dc:	84 e2       	ldi	r24, 0x24	; 36
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	fc 01       	movw	r30, r24
     9e4:	20 83       	st	Z, r18
     9e6:	85 e2       	ldi	r24, 0x25	; 37
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	fc 01       	movw	r30, r24
     9ec:	10 82       	st	Z, r1
    DDRC = 0xFF; PORTC = 0x00;
     9ee:	87 e2       	ldi	r24, 0x27	; 39
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	2f ef       	ldi	r18, 0xFF	; 255
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 83       	st	Z, r18
     9f8:	88 e2       	ldi	r24, 0x28	; 40
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	fc 01       	movw	r30, r24
     9fe:	10 82       	st	Z, r1
    DDRD = 0xBF; PORTD = 0X40;
     a00:	8a e2       	ldi	r24, 0x2A	; 42
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	2f eb       	ldi	r18, 0xBF	; 191
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
     a0a:	8b e2       	ldi	r24, 0x2B	; 43
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	20 e4       	ldi	r18, 0x40	; 64
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
    LCD_init();
     a14:	d4 db       	rcall	.-2136   	; 0x1be <LCD_init>
    
    init();         //init timer1, prescale 1/8, set the positive edge as trigger
     a16:	e4 dc       	rcall	.-1592   	; 0x3e0 <init>
                    //allow timer1 overflow interrupt and capture interrupt
    
    asm("sei");
     a18:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
        
        trigger();    // trigger the sensor
     a1a:	f4 dc       	rcall	.-1560   	; 0x404 <trigger>
     a1c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <distance>
        dtostrf(distance,3,2,string);          // change fixed point to string
     a20:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <distance+0x1>
     a24:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <distance+0x2>
     a28:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <distance+0x3>
     a2c:	01 e0       	ldi	r16, 0x01	; 1
     a2e:	11 e0       	ldi	r17, 0x01	; 1
     a30:	22 e0       	ldi	r18, 0x02	; 2
     a32:	43 e0       	ldi	r20, 0x03	; 3
     a34:	bc 01       	movw	r22, r24
     a36:	cd 01       	movw	r24, r26
     a38:	44 d2       	rcall	.+1160   	; 0xec2 <dtostrf>
     a3a:	61 e0       	ldi	r22, 0x01	; 1
        LCD_DisplayString(1,string);                       
     a3c:	71 e0       	ldi	r23, 0x01	; 1
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	32 dc       	rcall	.-1948   	; 0x2a6 <LCD_DisplayString>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	aa e7       	ldi	r26, 0x7A	; 122
     a48:	b4 e4       	ldi	r27, 0x44	; 68
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	ab 83       	std	Y+3, r26	; 0x03
     a50:	bc 83       	std	Y+4, r27	; 0x04
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a56:	4a e7       	ldi	r20, 0x7A	; 122
     a58:	53 e4       	ldi	r21, 0x43	; 67
     a5a:	69 81       	ldd	r22, Y+1	; 0x01
     a5c:	7a 81       	ldd	r23, Y+2	; 0x02
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	9c 81       	ldd	r25, Y+4	; 0x04
     a62:	aa d1       	rcall	.+852    	; 0xdb8 <__mulsf3>
     a64:	dc 01       	movw	r26, r24
     a66:	cb 01       	movw	r24, r22
     a68:	8d 83       	std	Y+5, r24	; 0x05
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	af 83       	std	Y+7, r26	; 0x07
     a6e:	b8 87       	std	Y+8, r27	; 0x08
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
     a74:	40 e8       	ldi	r20, 0x80	; 128
     a76:	5f e3       	ldi	r21, 0x3F	; 63
     a78:	6d 81       	ldd	r22, Y+5	; 0x05
     a7a:	7e 81       	ldd	r23, Y+6	; 0x06
     a7c:	8f 81       	ldd	r24, Y+7	; 0x07
     a7e:	98 85       	ldd	r25, Y+8	; 0x08
     a80:	4d d0       	rcall	.+154    	; 0xb1c <__cmpsf2>
     a82:	88 23       	and	r24, r24
     a84:	2c f4       	brge	.+10     	; 0xa90 <main+0xde>
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     a8a:	9a 87       	std	Y+10, r25	; 0x0a
     a8c:	89 87       	std	Y+9, r24	; 0x09
     a8e:	3b c0       	rjmp	.+118    	; 0xb06 <main+0x154>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     a94:	4f e7       	ldi	r20, 0x7F	; 127
     a96:	57 e4       	ldi	r21, 0x47	; 71
     a98:	6d 81       	ldd	r22, Y+5	; 0x05
     a9a:	7e 81       	ldd	r23, Y+6	; 0x06
     a9c:	8f 81       	ldd	r24, Y+7	; 0x07
     a9e:	98 85       	ldd	r25, Y+8	; 0x08
     aa0:	87 d1       	rcall	.+782    	; 0xdb0 <__gesf2>
     aa2:	18 16       	cp	r1, r24
     aa4:	3c f5       	brge	.+78     	; 0xaf4 <main+0x142>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aaa:	40 e2       	ldi	r20, 0x20	; 32
     aac:	51 e4       	ldi	r21, 0x41	; 65
     aae:	69 81       	ldd	r22, Y+1	; 0x01
     ab0:	7a 81       	ldd	r23, Y+2	; 0x02
     ab2:	8b 81       	ldd	r24, Y+3	; 0x03
     ab4:	9c 81       	ldd	r25, Y+4	; 0x04
     ab6:	80 d1       	rcall	.+768    	; 0xdb8 <__mulsf3>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	bc 01       	movw	r22, r24
     abe:	cd 01       	movw	r24, r26
     ac0:	99 d0       	rcall	.+306    	; 0xbf4 <__fixunssfsi>
     ac2:	dc 01       	movw	r26, r24
     ac4:	cb 01       	movw	r24, r22
     ac6:	9a 87       	std	Y+10, r25	; 0x0a
     ac8:	89 87       	std	Y+9, r24	; 0x09
     aca:	0f c0       	rjmp	.+30     	; 0xaea <main+0x138>
     acc:	89 e1       	ldi	r24, 0x19	; 25
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	9c 87       	std	Y+12, r25	; 0x0c
     ad2:	8b 87       	std	Y+11, r24	; 0x0b
     ad4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ad6:	9c 85       	ldd	r25, Y+12	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <main+0x126>
     adc:	9c 87       	std	Y+12, r25	; 0x0c
     ade:	8b 87       	std	Y+11, r24	; 0x0b
     ae0:	89 85       	ldd	r24, Y+9	; 0x09
     ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	9a 87       	std	Y+10, r25	; 0x0a
     ae8:	89 87       	std	Y+9, r24	; 0x09
     aea:	89 85       	ldd	r24, Y+9	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aec:	9a 85       	ldd	r25, Y+10	; 0x0a
     aee:	89 2b       	or	r24, r25
     af0:	69 f7       	brne	.-38     	; 0xacc <main+0x11a>
     af2:	13 c0       	rjmp	.+38     	; 0xb1a <main+0x168>
     af4:	6d 81       	ldd	r22, Y+5	; 0x05
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     af6:	7e 81       	ldd	r23, Y+6	; 0x06
     af8:	8f 81       	ldd	r24, Y+7	; 0x07
     afa:	98 85       	ldd	r25, Y+8	; 0x08
     afc:	7b d0       	rcall	.+246    	; 0xbf4 <__fixunssfsi>
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	9a 87       	std	Y+10, r25	; 0x0a
     b04:	89 87       	std	Y+9, r24	; 0x09
     b06:	89 85       	ldd	r24, Y+9	; 0x09
     b08:	9a 85       	ldd	r25, Y+10	; 0x0a
     b0a:	9e 87       	std	Y+14, r25	; 0x0e
     b0c:	8d 87       	std	Y+13, r24	; 0x0d
     b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b10:	9e 85       	ldd	r25, Y+14	; 0x0e
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <main+0x160>
     b16:	9e 87       	std	Y+14, r25	; 0x0e
     b18:	8d 87       	std	Y+13, r24	; 0x0d
     b1a:	7f cf       	rjmp	.-258    	; 0xa1a <main+0x68>

00000b1c <__cmpsf2>:
     b1c:	d4 d0       	rcall	.+424    	; 0xcc6 <__fp_cmp>
        _delay_ms(1000);                                

    }
     b1e:	08 f4       	brcc	.+2      	; 0xb22 <__cmpsf2+0x6>
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	08 95       	ret

00000b24 <__divsf3>:
     b24:	0c d0       	rcall	.+24     	; 0xb3e <__divsf3x>
     b26:	0a c1       	rjmp	.+532    	; 0xd3c <__fp_round>
     b28:	02 d1       	rcall	.+516    	; 0xd2e <__fp_pscB>
     b2a:	40 f0       	brcs	.+16     	; 0xb3c <__divsf3+0x18>
     b2c:	f9 d0       	rcall	.+498    	; 0xd20 <__fp_pscA>
     b2e:	30 f0       	brcs	.+12     	; 0xb3c <__divsf3+0x18>
     b30:	21 f4       	brne	.+8      	; 0xb3a <__divsf3+0x16>
     b32:	5f 3f       	cpi	r21, 0xFF	; 255
     b34:	19 f0       	breq	.+6      	; 0xb3c <__divsf3+0x18>
     b36:	eb c0       	rjmp	.+470    	; 0xd0e <__fp_inf>
     b38:	51 11       	cpse	r21, r1
     b3a:	34 c1       	rjmp	.+616    	; 0xda4 <__fp_szero>
     b3c:	ee c0       	rjmp	.+476    	; 0xd1a <__fp_nan>

00000b3e <__divsf3x>:
     b3e:	0f d1       	rcall	.+542    	; 0xd5e <__fp_split3>
     b40:	98 f3       	brcs	.-26     	; 0xb28 <__divsf3+0x4>

00000b42 <__divsf3_pse>:
     b42:	99 23       	and	r25, r25
     b44:	c9 f3       	breq	.-14     	; 0xb38 <__divsf3+0x14>
     b46:	55 23       	and	r21, r21
     b48:	b1 f3       	breq	.-20     	; 0xb36 <__divsf3+0x12>
     b4a:	95 1b       	sub	r25, r21
     b4c:	55 0b       	sbc	r21, r21
     b4e:	bb 27       	eor	r27, r27
     b50:	aa 27       	eor	r26, r26
     b52:	62 17       	cp	r22, r18
     b54:	73 07       	cpc	r23, r19
     b56:	84 07       	cpc	r24, r20
     b58:	38 f0       	brcs	.+14     	; 0xb68 <__divsf3_pse+0x26>
     b5a:	9f 5f       	subi	r25, 0xFF	; 255
     b5c:	5f 4f       	sbci	r21, 0xFF	; 255
     b5e:	22 0f       	add	r18, r18
     b60:	33 1f       	adc	r19, r19
     b62:	44 1f       	adc	r20, r20
     b64:	aa 1f       	adc	r26, r26
     b66:	a9 f3       	breq	.-22     	; 0xb52 <__divsf3_pse+0x10>
     b68:	33 d0       	rcall	.+102    	; 0xbd0 <__divsf3_pse+0x8e>
     b6a:	0e 2e       	mov	r0, r30
     b6c:	3a f0       	brmi	.+14     	; 0xb7c <__divsf3_pse+0x3a>
     b6e:	e0 e8       	ldi	r30, 0x80	; 128
     b70:	30 d0       	rcall	.+96     	; 0xbd2 <__divsf3_pse+0x90>
     b72:	91 50       	subi	r25, 0x01	; 1
     b74:	50 40       	sbci	r21, 0x00	; 0
     b76:	e6 95       	lsr	r30
     b78:	00 1c       	adc	r0, r0
     b7a:	ca f7       	brpl	.-14     	; 0xb6e <__divsf3_pse+0x2c>
     b7c:	29 d0       	rcall	.+82     	; 0xbd0 <__divsf3_pse+0x8e>
     b7e:	fe 2f       	mov	r31, r30
     b80:	27 d0       	rcall	.+78     	; 0xbd0 <__divsf3_pse+0x8e>
     b82:	66 0f       	add	r22, r22
     b84:	77 1f       	adc	r23, r23
     b86:	88 1f       	adc	r24, r24
     b88:	bb 1f       	adc	r27, r27
     b8a:	26 17       	cp	r18, r22
     b8c:	37 07       	cpc	r19, r23
     b8e:	48 07       	cpc	r20, r24
     b90:	ab 07       	cpc	r26, r27
     b92:	b0 e8       	ldi	r27, 0x80	; 128
     b94:	09 f0       	breq	.+2      	; 0xb98 <__divsf3_pse+0x56>
     b96:	bb 0b       	sbc	r27, r27
     b98:	80 2d       	mov	r24, r0
     b9a:	bf 01       	movw	r22, r30
     b9c:	ff 27       	eor	r31, r31
     b9e:	93 58       	subi	r25, 0x83	; 131
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	2a f0       	brmi	.+10     	; 0xbae <__divsf3_pse+0x6c>
     ba4:	9e 3f       	cpi	r25, 0xFE	; 254
     ba6:	51 05       	cpc	r21, r1
     ba8:	68 f0       	brcs	.+26     	; 0xbc4 <__divsf3_pse+0x82>
     baa:	b1 c0       	rjmp	.+354    	; 0xd0e <__fp_inf>
     bac:	fb c0       	rjmp	.+502    	; 0xda4 <__fp_szero>
     bae:	5f 3f       	cpi	r21, 0xFF	; 255
     bb0:	ec f3       	brlt	.-6      	; 0xbac <__divsf3_pse+0x6a>
     bb2:	98 3e       	cpi	r25, 0xE8	; 232
     bb4:	dc f3       	brlt	.-10     	; 0xbac <__divsf3_pse+0x6a>
     bb6:	86 95       	lsr	r24
     bb8:	77 95       	ror	r23
     bba:	67 95       	ror	r22
     bbc:	b7 95       	ror	r27
     bbe:	f7 95       	ror	r31
     bc0:	9f 5f       	subi	r25, 0xFF	; 255
     bc2:	c9 f7       	brne	.-14     	; 0xbb6 <__divsf3_pse+0x74>
     bc4:	88 0f       	add	r24, r24
     bc6:	91 1d       	adc	r25, r1
     bc8:	96 95       	lsr	r25
     bca:	87 95       	ror	r24
     bcc:	97 f9       	bld	r25, 7
     bce:	08 95       	ret
     bd0:	e1 e0       	ldi	r30, 0x01	; 1
     bd2:	66 0f       	add	r22, r22
     bd4:	77 1f       	adc	r23, r23
     bd6:	88 1f       	adc	r24, r24
     bd8:	bb 1f       	adc	r27, r27
     bda:	62 17       	cp	r22, r18
     bdc:	73 07       	cpc	r23, r19
     bde:	84 07       	cpc	r24, r20
     be0:	ba 07       	cpc	r27, r26
     be2:	20 f0       	brcs	.+8      	; 0xbec <__divsf3_pse+0xaa>
     be4:	62 1b       	sub	r22, r18
     be6:	73 0b       	sbc	r23, r19
     be8:	84 0b       	sbc	r24, r20
     bea:	ba 0b       	sbc	r27, r26
     bec:	ee 1f       	adc	r30, r30
     bee:	88 f7       	brcc	.-30     	; 0xbd2 <__divsf3_pse+0x90>
     bf0:	e0 95       	com	r30
     bf2:	08 95       	ret

00000bf4 <__fixunssfsi>:
     bf4:	bc d0       	rcall	.+376    	; 0xd6e <__fp_splitA>
     bf6:	88 f0       	brcs	.+34     	; 0xc1a <__fixunssfsi+0x26>
     bf8:	9f 57       	subi	r25, 0x7F	; 127
     bfa:	90 f0       	brcs	.+36     	; 0xc20 <__fixunssfsi+0x2c>
     bfc:	b9 2f       	mov	r27, r25
     bfe:	99 27       	eor	r25, r25
     c00:	b7 51       	subi	r27, 0x17	; 23
     c02:	a0 f0       	brcs	.+40     	; 0xc2c <__fixunssfsi+0x38>
     c04:	d1 f0       	breq	.+52     	; 0xc3a <__fixunssfsi+0x46>
     c06:	66 0f       	add	r22, r22
     c08:	77 1f       	adc	r23, r23
     c0a:	88 1f       	adc	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	1a f0       	brmi	.+6      	; 0xc16 <__fixunssfsi+0x22>
     c10:	ba 95       	dec	r27
     c12:	c9 f7       	brne	.-14     	; 0xc06 <__fixunssfsi+0x12>
     c14:	12 c0       	rjmp	.+36     	; 0xc3a <__fixunssfsi+0x46>
     c16:	b1 30       	cpi	r27, 0x01	; 1
     c18:	81 f0       	breq	.+32     	; 0xc3a <__fixunssfsi+0x46>
     c1a:	c3 d0       	rcall	.+390    	; 0xda2 <__fp_zero>
     c1c:	b1 e0       	ldi	r27, 0x01	; 1
     c1e:	08 95       	ret
     c20:	c0 c0       	rjmp	.+384    	; 0xda2 <__fp_zero>
     c22:	67 2f       	mov	r22, r23
     c24:	78 2f       	mov	r23, r24
     c26:	88 27       	eor	r24, r24
     c28:	b8 5f       	subi	r27, 0xF8	; 248
     c2a:	39 f0       	breq	.+14     	; 0xc3a <__fixunssfsi+0x46>
     c2c:	b9 3f       	cpi	r27, 0xF9	; 249
     c2e:	cc f3       	brlt	.-14     	; 0xc22 <__fixunssfsi+0x2e>
     c30:	86 95       	lsr	r24
     c32:	77 95       	ror	r23
     c34:	67 95       	ror	r22
     c36:	b3 95       	inc	r27
     c38:	d9 f7       	brne	.-10     	; 0xc30 <__fixunssfsi+0x3c>
     c3a:	3e f4       	brtc	.+14     	; 0xc4a <__fixunssfsi+0x56>
     c3c:	90 95       	com	r25
     c3e:	80 95       	com	r24
     c40:	70 95       	com	r23
     c42:	61 95       	neg	r22
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
     c46:	8f 4f       	sbci	r24, 0xFF	; 255
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	08 95       	ret

00000c4c <__floatunsisf>:
     c4c:	e8 94       	clt
     c4e:	09 c0       	rjmp	.+18     	; 0xc62 <__floatsisf+0x12>

00000c50 <__floatsisf>:
     c50:	97 fb       	bst	r25, 7
     c52:	3e f4       	brtc	.+14     	; 0xc62 <__floatsisf+0x12>
     c54:	90 95       	com	r25
     c56:	80 95       	com	r24
     c58:	70 95       	com	r23
     c5a:	61 95       	neg	r22
     c5c:	7f 4f       	sbci	r23, 0xFF	; 255
     c5e:	8f 4f       	sbci	r24, 0xFF	; 255
     c60:	9f 4f       	sbci	r25, 0xFF	; 255
     c62:	99 23       	and	r25, r25
     c64:	a9 f0       	breq	.+42     	; 0xc90 <__floatsisf+0x40>
     c66:	f9 2f       	mov	r31, r25
     c68:	96 e9       	ldi	r25, 0x96	; 150
     c6a:	bb 27       	eor	r27, r27
     c6c:	93 95       	inc	r25
     c6e:	f6 95       	lsr	r31
     c70:	87 95       	ror	r24
     c72:	77 95       	ror	r23
     c74:	67 95       	ror	r22
     c76:	b7 95       	ror	r27
     c78:	f1 11       	cpse	r31, r1
     c7a:	f8 cf       	rjmp	.-16     	; 0xc6c <__floatsisf+0x1c>
     c7c:	fa f4       	brpl	.+62     	; 0xcbc <__floatsisf+0x6c>
     c7e:	bb 0f       	add	r27, r27
     c80:	11 f4       	brne	.+4      	; 0xc86 <__floatsisf+0x36>
     c82:	60 ff       	sbrs	r22, 0
     c84:	1b c0       	rjmp	.+54     	; 0xcbc <__floatsisf+0x6c>
     c86:	6f 5f       	subi	r22, 0xFF	; 255
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	8f 4f       	sbci	r24, 0xFF	; 255
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	16 c0       	rjmp	.+44     	; 0xcbc <__floatsisf+0x6c>
     c90:	88 23       	and	r24, r24
     c92:	11 f0       	breq	.+4      	; 0xc98 <__floatsisf+0x48>
     c94:	96 e9       	ldi	r25, 0x96	; 150
     c96:	11 c0       	rjmp	.+34     	; 0xcba <__floatsisf+0x6a>
     c98:	77 23       	and	r23, r23
     c9a:	21 f0       	breq	.+8      	; 0xca4 <__floatsisf+0x54>
     c9c:	9e e8       	ldi	r25, 0x8E	; 142
     c9e:	87 2f       	mov	r24, r23
     ca0:	76 2f       	mov	r23, r22
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <__floatsisf+0x5e>
     ca4:	66 23       	and	r22, r22
     ca6:	71 f0       	breq	.+28     	; 0xcc4 <__floatsisf+0x74>
     ca8:	96 e8       	ldi	r25, 0x86	; 134
     caa:	86 2f       	mov	r24, r22
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	2a f0       	brmi	.+10     	; 0xcbc <__floatsisf+0x6c>
     cb2:	9a 95       	dec	r25
     cb4:	66 0f       	add	r22, r22
     cb6:	77 1f       	adc	r23, r23
     cb8:	88 1f       	adc	r24, r24
     cba:	da f7       	brpl	.-10     	; 0xcb2 <__floatsisf+0x62>
     cbc:	88 0f       	add	r24, r24
     cbe:	96 95       	lsr	r25
     cc0:	87 95       	ror	r24
     cc2:	97 f9       	bld	r25, 7
     cc4:	08 95       	ret

00000cc6 <__fp_cmp>:
     cc6:	99 0f       	add	r25, r25
     cc8:	00 08       	sbc	r0, r0
     cca:	55 0f       	add	r21, r21
     ccc:	aa 0b       	sbc	r26, r26
     cce:	e0 e8       	ldi	r30, 0x80	; 128
     cd0:	fe ef       	ldi	r31, 0xFE	; 254
     cd2:	16 16       	cp	r1, r22
     cd4:	17 06       	cpc	r1, r23
     cd6:	e8 07       	cpc	r30, r24
     cd8:	f9 07       	cpc	r31, r25
     cda:	c0 f0       	brcs	.+48     	; 0xd0c <__fp_cmp+0x46>
     cdc:	12 16       	cp	r1, r18
     cde:	13 06       	cpc	r1, r19
     ce0:	e4 07       	cpc	r30, r20
     ce2:	f5 07       	cpc	r31, r21
     ce4:	98 f0       	brcs	.+38     	; 0xd0c <__fp_cmp+0x46>
     ce6:	62 1b       	sub	r22, r18
     ce8:	73 0b       	sbc	r23, r19
     cea:	84 0b       	sbc	r24, r20
     cec:	95 0b       	sbc	r25, r21
     cee:	39 f4       	brne	.+14     	; 0xcfe <__fp_cmp+0x38>
     cf0:	0a 26       	eor	r0, r26
     cf2:	61 f0       	breq	.+24     	; 0xd0c <__fp_cmp+0x46>
     cf4:	23 2b       	or	r18, r19
     cf6:	24 2b       	or	r18, r20
     cf8:	25 2b       	or	r18, r21
     cfa:	21 f4       	brne	.+8      	; 0xd04 <__fp_cmp+0x3e>
     cfc:	08 95       	ret
     cfe:	0a 26       	eor	r0, r26
     d00:	09 f4       	brne	.+2      	; 0xd04 <__fp_cmp+0x3e>
     d02:	a1 40       	sbci	r26, 0x01	; 1
     d04:	a6 95       	lsr	r26
     d06:	8f ef       	ldi	r24, 0xFF	; 255
     d08:	81 1d       	adc	r24, r1
     d0a:	81 1d       	adc	r24, r1
     d0c:	08 95       	ret

00000d0e <__fp_inf>:
     d0e:	97 f9       	bld	r25, 7
     d10:	9f 67       	ori	r25, 0x7F	; 127
     d12:	80 e8       	ldi	r24, 0x80	; 128
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	08 95       	ret

00000d1a <__fp_nan>:
     d1a:	9f ef       	ldi	r25, 0xFF	; 255
     d1c:	80 ec       	ldi	r24, 0xC0	; 192
     d1e:	08 95       	ret

00000d20 <__fp_pscA>:
     d20:	00 24       	eor	r0, r0
     d22:	0a 94       	dec	r0
     d24:	16 16       	cp	r1, r22
     d26:	17 06       	cpc	r1, r23
     d28:	18 06       	cpc	r1, r24
     d2a:	09 06       	cpc	r0, r25
     d2c:	08 95       	ret

00000d2e <__fp_pscB>:
     d2e:	00 24       	eor	r0, r0
     d30:	0a 94       	dec	r0
     d32:	12 16       	cp	r1, r18
     d34:	13 06       	cpc	r1, r19
     d36:	14 06       	cpc	r1, r20
     d38:	05 06       	cpc	r0, r21
     d3a:	08 95       	ret

00000d3c <__fp_round>:
     d3c:	09 2e       	mov	r0, r25
     d3e:	03 94       	inc	r0
     d40:	00 0c       	add	r0, r0
     d42:	11 f4       	brne	.+4      	; 0xd48 <__fp_round+0xc>
     d44:	88 23       	and	r24, r24
     d46:	52 f0       	brmi	.+20     	; 0xd5c <__fp_round+0x20>
     d48:	bb 0f       	add	r27, r27
     d4a:	40 f4       	brcc	.+16     	; 0xd5c <__fp_round+0x20>
     d4c:	bf 2b       	or	r27, r31
     d4e:	11 f4       	brne	.+4      	; 0xd54 <__fp_round+0x18>
     d50:	60 ff       	sbrs	r22, 0
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <__fp_round+0x20>
     d54:	6f 5f       	subi	r22, 0xFF	; 255
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	8f 4f       	sbci	r24, 0xFF	; 255
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	08 95       	ret

00000d5e <__fp_split3>:
     d5e:	57 fd       	sbrc	r21, 7
     d60:	90 58       	subi	r25, 0x80	; 128
     d62:	44 0f       	add	r20, r20
     d64:	55 1f       	adc	r21, r21
     d66:	59 f0       	breq	.+22     	; 0xd7e <__fp_splitA+0x10>
     d68:	5f 3f       	cpi	r21, 0xFF	; 255
     d6a:	71 f0       	breq	.+28     	; 0xd88 <__fp_splitA+0x1a>
     d6c:	47 95       	ror	r20

00000d6e <__fp_splitA>:
     d6e:	88 0f       	add	r24, r24
     d70:	97 fb       	bst	r25, 7
     d72:	99 1f       	adc	r25, r25
     d74:	61 f0       	breq	.+24     	; 0xd8e <__fp_splitA+0x20>
     d76:	9f 3f       	cpi	r25, 0xFF	; 255
     d78:	79 f0       	breq	.+30     	; 0xd98 <__fp_splitA+0x2a>
     d7a:	87 95       	ror	r24
     d7c:	08 95       	ret
     d7e:	12 16       	cp	r1, r18
     d80:	13 06       	cpc	r1, r19
     d82:	14 06       	cpc	r1, r20
     d84:	55 1f       	adc	r21, r21
     d86:	f2 cf       	rjmp	.-28     	; 0xd6c <__fp_split3+0xe>
     d88:	46 95       	lsr	r20
     d8a:	f1 df       	rcall	.-30     	; 0xd6e <__fp_splitA>
     d8c:	08 c0       	rjmp	.+16     	; 0xd9e <__fp_splitA+0x30>
     d8e:	16 16       	cp	r1, r22
     d90:	17 06       	cpc	r1, r23
     d92:	18 06       	cpc	r1, r24
     d94:	99 1f       	adc	r25, r25
     d96:	f1 cf       	rjmp	.-30     	; 0xd7a <__fp_splitA+0xc>
     d98:	86 95       	lsr	r24
     d9a:	71 05       	cpc	r23, r1
     d9c:	61 05       	cpc	r22, r1
     d9e:	08 94       	sec
     da0:	08 95       	ret

00000da2 <__fp_zero>:
     da2:	e8 94       	clt

00000da4 <__fp_szero>:
     da4:	bb 27       	eor	r27, r27
     da6:	66 27       	eor	r22, r22
     da8:	77 27       	eor	r23, r23
     daa:	cb 01       	movw	r24, r22
     dac:	97 f9       	bld	r25, 7
     dae:	08 95       	ret

00000db0 <__gesf2>:
     db0:	8a df       	rcall	.-236    	; 0xcc6 <__fp_cmp>
     db2:	08 f4       	brcc	.+2      	; 0xdb6 <__gesf2+0x6>
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	08 95       	ret

00000db8 <__mulsf3>:
     db8:	0b d0       	rcall	.+22     	; 0xdd0 <__mulsf3x>
     dba:	c0 cf       	rjmp	.-128    	; 0xd3c <__fp_round>
     dbc:	b1 df       	rcall	.-158    	; 0xd20 <__fp_pscA>
     dbe:	28 f0       	brcs	.+10     	; 0xdca <__mulsf3+0x12>
     dc0:	b6 df       	rcall	.-148    	; 0xd2e <__fp_pscB>
     dc2:	18 f0       	brcs	.+6      	; 0xdca <__mulsf3+0x12>
     dc4:	95 23       	and	r25, r21
     dc6:	09 f0       	breq	.+2      	; 0xdca <__mulsf3+0x12>
     dc8:	a2 cf       	rjmp	.-188    	; 0xd0e <__fp_inf>
     dca:	a7 cf       	rjmp	.-178    	; 0xd1a <__fp_nan>
     dcc:	11 24       	eor	r1, r1
     dce:	ea cf       	rjmp	.-44     	; 0xda4 <__fp_szero>

00000dd0 <__mulsf3x>:
     dd0:	c6 df       	rcall	.-116    	; 0xd5e <__fp_split3>
     dd2:	a0 f3       	brcs	.-24     	; 0xdbc <__mulsf3+0x4>

00000dd4 <__mulsf3_pse>:
     dd4:	95 9f       	mul	r25, r21
     dd6:	d1 f3       	breq	.-12     	; 0xdcc <__mulsf3+0x14>
     dd8:	95 0f       	add	r25, r21
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	55 1f       	adc	r21, r21
     dde:	62 9f       	mul	r22, r18
     de0:	f0 01       	movw	r30, r0
     de2:	72 9f       	mul	r23, r18
     de4:	bb 27       	eor	r27, r27
     de6:	f0 0d       	add	r31, r0
     de8:	b1 1d       	adc	r27, r1
     dea:	63 9f       	mul	r22, r19
     dec:	aa 27       	eor	r26, r26
     dee:	f0 0d       	add	r31, r0
     df0:	b1 1d       	adc	r27, r1
     df2:	aa 1f       	adc	r26, r26
     df4:	64 9f       	mul	r22, r20
     df6:	66 27       	eor	r22, r22
     df8:	b0 0d       	add	r27, r0
     dfa:	a1 1d       	adc	r26, r1
     dfc:	66 1f       	adc	r22, r22
     dfe:	82 9f       	mul	r24, r18
     e00:	22 27       	eor	r18, r18
     e02:	b0 0d       	add	r27, r0
     e04:	a1 1d       	adc	r26, r1
     e06:	62 1f       	adc	r22, r18
     e08:	73 9f       	mul	r23, r19
     e0a:	b0 0d       	add	r27, r0
     e0c:	a1 1d       	adc	r26, r1
     e0e:	62 1f       	adc	r22, r18
     e10:	83 9f       	mul	r24, r19
     e12:	a0 0d       	add	r26, r0
     e14:	61 1d       	adc	r22, r1
     e16:	22 1f       	adc	r18, r18
     e18:	74 9f       	mul	r23, r20
     e1a:	33 27       	eor	r19, r19
     e1c:	a0 0d       	add	r26, r0
     e1e:	61 1d       	adc	r22, r1
     e20:	23 1f       	adc	r18, r19
     e22:	84 9f       	mul	r24, r20
     e24:	60 0d       	add	r22, r0
     e26:	21 1d       	adc	r18, r1
     e28:	82 2f       	mov	r24, r18
     e2a:	76 2f       	mov	r23, r22
     e2c:	6a 2f       	mov	r22, r26
     e2e:	11 24       	eor	r1, r1
     e30:	9f 57       	subi	r25, 0x7F	; 127
     e32:	50 40       	sbci	r21, 0x00	; 0
     e34:	8a f0       	brmi	.+34     	; 0xe58 <__mulsf3_pse+0x84>
     e36:	e1 f0       	breq	.+56     	; 0xe70 <__mulsf3_pse+0x9c>
     e38:	88 23       	and	r24, r24
     e3a:	4a f0       	brmi	.+18     	; 0xe4e <__mulsf3_pse+0x7a>
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	bb 1f       	adc	r27, r27
     e42:	66 1f       	adc	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	88 1f       	adc	r24, r24
     e48:	91 50       	subi	r25, 0x01	; 1
     e4a:	50 40       	sbci	r21, 0x00	; 0
     e4c:	a9 f7       	brne	.-22     	; 0xe38 <__mulsf3_pse+0x64>
     e4e:	9e 3f       	cpi	r25, 0xFE	; 254
     e50:	51 05       	cpc	r21, r1
     e52:	70 f0       	brcs	.+28     	; 0xe70 <__mulsf3_pse+0x9c>
     e54:	5c cf       	rjmp	.-328    	; 0xd0e <__fp_inf>
     e56:	a6 cf       	rjmp	.-180    	; 0xda4 <__fp_szero>
     e58:	5f 3f       	cpi	r21, 0xFF	; 255
     e5a:	ec f3       	brlt	.-6      	; 0xe56 <__mulsf3_pse+0x82>
     e5c:	98 3e       	cpi	r25, 0xE8	; 232
     e5e:	dc f3       	brlt	.-10     	; 0xe56 <__mulsf3_pse+0x82>
     e60:	86 95       	lsr	r24
     e62:	77 95       	ror	r23
     e64:	67 95       	ror	r22
     e66:	b7 95       	ror	r27
     e68:	f7 95       	ror	r31
     e6a:	e7 95       	ror	r30
     e6c:	9f 5f       	subi	r25, 0xFF	; 255
     e6e:	c1 f7       	brne	.-16     	; 0xe60 <__mulsf3_pse+0x8c>
     e70:	fe 2b       	or	r31, r30
     e72:	88 0f       	add	r24, r24
     e74:	91 1d       	adc	r25, r1
     e76:	96 95       	lsr	r25
     e78:	87 95       	ror	r24
     e7a:	97 f9       	bld	r25, 7
     e7c:	08 95       	ret

00000e7e <__udivmodsi4>:
     e7e:	a1 e2       	ldi	r26, 0x21	; 33
     e80:	1a 2e       	mov	r1, r26
     e82:	aa 1b       	sub	r26, r26
     e84:	bb 1b       	sub	r27, r27
     e86:	fd 01       	movw	r30, r26
     e88:	0d c0       	rjmp	.+26     	; 0xea4 <__udivmodsi4_ep>

00000e8a <__udivmodsi4_loop>:
     e8a:	aa 1f       	adc	r26, r26
     e8c:	bb 1f       	adc	r27, r27
     e8e:	ee 1f       	adc	r30, r30
     e90:	ff 1f       	adc	r31, r31
     e92:	a2 17       	cp	r26, r18
     e94:	b3 07       	cpc	r27, r19
     e96:	e4 07       	cpc	r30, r20
     e98:	f5 07       	cpc	r31, r21
     e9a:	20 f0       	brcs	.+8      	; 0xea4 <__udivmodsi4_ep>
     e9c:	a2 1b       	sub	r26, r18
     e9e:	b3 0b       	sbc	r27, r19
     ea0:	e4 0b       	sbc	r30, r20
     ea2:	f5 0b       	sbc	r31, r21

00000ea4 <__udivmodsi4_ep>:
     ea4:	66 1f       	adc	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	88 1f       	adc	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	1a 94       	dec	r1
     eae:	69 f7       	brne	.-38     	; 0xe8a <__udivmodsi4_loop>
     eb0:	60 95       	com	r22
     eb2:	70 95       	com	r23
     eb4:	80 95       	com	r24
     eb6:	90 95       	com	r25
     eb8:	9b 01       	movw	r18, r22
     eba:	ac 01       	movw	r20, r24
     ebc:	bd 01       	movw	r22, r26
     ebe:	cf 01       	movw	r24, r30
     ec0:	08 95       	ret

00000ec2 <dtostrf>:
     ec2:	ef 92       	push	r14
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	e8 01       	movw	r28, r16
     ece:	47 fd       	sbrc	r20, 7
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <dtostrf+0x14>
     ed2:	34 e0       	ldi	r19, 0x04	; 4
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <dtostrf+0x16>
     ed6:	34 e1       	ldi	r19, 0x14	; 20
     ed8:	04 2e       	mov	r0, r20
     eda:	00 0c       	add	r0, r0
     edc:	55 0b       	sbc	r21, r21
     ede:	57 ff       	sbrs	r21, 7
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <dtostrf+0x26>
     ee2:	51 95       	neg	r21
     ee4:	41 95       	neg	r20
     ee6:	51 09       	sbc	r21, r1
     ee8:	e3 2e       	mov	r14, r19
     eea:	02 2f       	mov	r16, r18
     eec:	24 2f       	mov	r18, r20
     eee:	ae 01       	movw	r20, r28
     ef0:	07 d0       	rcall	.+14     	; 0xf00 <dtoa_prf>
     ef2:	ce 01       	movw	r24, r28
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ef 90       	pop	r14
     efe:	08 95       	ret

00000f00 <dtoa_prf>:
     f00:	8f 92       	push	r8
     f02:	9f 92       	push	r9
     f04:	af 92       	push	r10
     f06:	bf 92       	push	r11
     f08:	cf 92       	push	r12
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	29 97       	sbiw	r28, 0x09	; 9
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	6a 01       	movw	r12, r20
     f2a:	12 2f       	mov	r17, r18
     f2c:	b0 2e       	mov	r11, r16
     f2e:	2b e3       	ldi	r18, 0x3B	; 59
     f30:	20 17       	cp	r18, r16
     f32:	20 f0       	brcs	.+8      	; 0xf3c <dtoa_prf+0x3c>
     f34:	ff 24       	eor	r15, r15
     f36:	f3 94       	inc	r15
     f38:	f0 0e       	add	r15, r16
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <dtoa_prf+0x40>
     f3c:	2c e3       	ldi	r18, 0x3C	; 60
     f3e:	f2 2e       	mov	r15, r18
     f40:	0f 2d       	mov	r16, r15
     f42:	27 e0       	ldi	r18, 0x07	; 7
     f44:	ae 01       	movw	r20, r28
     f46:	4f 5f       	subi	r20, 0xFF	; 255
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	50 d1       	rcall	.+672    	; 0x11ec <__ftoa_engine>
     f4c:	bc 01       	movw	r22, r24
     f4e:	49 81       	ldd	r20, Y+1	; 0x01
     f50:	84 2f       	mov	r24, r20
     f52:	89 70       	andi	r24, 0x09	; 9
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	31 f0       	breq	.+12     	; 0xf64 <dtoa_prf+0x64>
     f58:	e1 fc       	sbrc	r14, 1
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <dtoa_prf+0x68>
     f5c:	e0 fe       	sbrs	r14, 0
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <dtoa_prf+0x6c>
     f60:	90 e2       	ldi	r25, 0x20	; 32
     f62:	05 c0       	rjmp	.+10     	; 0xf6e <dtoa_prf+0x6e>
     f64:	9d e2       	ldi	r25, 0x2D	; 45
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <dtoa_prf+0x6e>
     f68:	9b e2       	ldi	r25, 0x2B	; 43
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <dtoa_prf+0x6e>
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	5e 2d       	mov	r21, r14
     f70:	50 71       	andi	r21, 0x10	; 16
     f72:	43 ff       	sbrs	r20, 3
     f74:	3c c0       	rjmp	.+120    	; 0xfee <dtoa_prf+0xee>
     f76:	91 11       	cpse	r25, r1
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <dtoa_prf+0x7e>
     f7a:	83 e0       	ldi	r24, 0x03	; 3
     f7c:	01 c0       	rjmp	.+2      	; 0xf80 <dtoa_prf+0x80>
     f7e:	84 e0       	ldi	r24, 0x04	; 4
     f80:	81 17       	cp	r24, r17
     f82:	18 f4       	brcc	.+6      	; 0xf8a <dtoa_prf+0x8a>
     f84:	21 2f       	mov	r18, r17
     f86:	28 1b       	sub	r18, r24
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <dtoa_prf+0x8c>
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	51 11       	cpse	r21, r1
     f8e:	0b c0       	rjmp	.+22     	; 0xfa6 <dtoa_prf+0xa6>
     f90:	f6 01       	movw	r30, r12
     f92:	82 2f       	mov	r24, r18
     f94:	30 e2       	ldi	r19, 0x20	; 32
     f96:	88 23       	and	r24, r24
     f98:	19 f0       	breq	.+6      	; 0xfa0 <dtoa_prf+0xa0>
     f9a:	31 93       	st	Z+, r19
     f9c:	81 50       	subi	r24, 0x01	; 1
     f9e:	fb cf       	rjmp	.-10     	; 0xf96 <dtoa_prf+0x96>
     fa0:	c2 0e       	add	r12, r18
     fa2:	d1 1c       	adc	r13, r1
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	99 23       	and	r25, r25
     fa8:	29 f0       	breq	.+10     	; 0xfb4 <dtoa_prf+0xb4>
     faa:	d6 01       	movw	r26, r12
     fac:	9c 93       	st	X, r25
     fae:	f6 01       	movw	r30, r12
     fb0:	31 96       	adiw	r30, 0x01	; 1
     fb2:	6f 01       	movw	r12, r30
     fb4:	c6 01       	movw	r24, r12
     fb6:	03 96       	adiw	r24, 0x03	; 3
     fb8:	e2 fe       	sbrs	r14, 2
     fba:	0a c0       	rjmp	.+20     	; 0xfd0 <dtoa_prf+0xd0>
     fbc:	3e e4       	ldi	r19, 0x4E	; 78
     fbe:	d6 01       	movw	r26, r12
     fc0:	3c 93       	st	X, r19
     fc2:	41 e4       	ldi	r20, 0x41	; 65
     fc4:	11 96       	adiw	r26, 0x01	; 1
     fc6:	4c 93       	st	X, r20
     fc8:	11 97       	sbiw	r26, 0x01	; 1
     fca:	12 96       	adiw	r26, 0x02	; 2
     fcc:	3c 93       	st	X, r19
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <dtoa_prf+0xdc>
     fd0:	3e e6       	ldi	r19, 0x6E	; 110
     fd2:	f6 01       	movw	r30, r12
     fd4:	30 83       	st	Z, r19
     fd6:	41 e6       	ldi	r20, 0x61	; 97
     fd8:	41 83       	std	Z+1, r20	; 0x01
     fda:	32 83       	std	Z+2, r19	; 0x02
     fdc:	fc 01       	movw	r30, r24
     fde:	32 2f       	mov	r19, r18
     fe0:	40 e2       	ldi	r20, 0x20	; 32
     fe2:	33 23       	and	r19, r19
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <dtoa_prf+0xe8>
     fe6:	42 c0       	rjmp	.+132    	; 0x106c <dtoa_prf+0x16c>
     fe8:	41 93       	st	Z+, r20
     fea:	31 50       	subi	r19, 0x01	; 1
     fec:	fa cf       	rjmp	.-12     	; 0xfe2 <dtoa_prf+0xe2>
     fee:	42 ff       	sbrs	r20, 2
     ff0:	44 c0       	rjmp	.+136    	; 0x107a <dtoa_prf+0x17a>
     ff2:	91 11       	cpse	r25, r1
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <dtoa_prf+0xfa>
     ff6:	83 e0       	ldi	r24, 0x03	; 3
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <dtoa_prf+0xfc>
     ffa:	84 e0       	ldi	r24, 0x04	; 4
     ffc:	81 17       	cp	r24, r17
     ffe:	18 f4       	brcc	.+6      	; 0x1006 <dtoa_prf+0x106>
    1000:	21 2f       	mov	r18, r17
    1002:	28 1b       	sub	r18, r24
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <dtoa_prf+0x108>
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	51 11       	cpse	r21, r1
    100a:	0b c0       	rjmp	.+22     	; 0x1022 <dtoa_prf+0x122>
    100c:	f6 01       	movw	r30, r12
    100e:	82 2f       	mov	r24, r18
    1010:	30 e2       	ldi	r19, 0x20	; 32
    1012:	88 23       	and	r24, r24
    1014:	19 f0       	breq	.+6      	; 0x101c <dtoa_prf+0x11c>
    1016:	31 93       	st	Z+, r19
    1018:	81 50       	subi	r24, 0x01	; 1
    101a:	fb cf       	rjmp	.-10     	; 0x1012 <dtoa_prf+0x112>
    101c:	c2 0e       	add	r12, r18
    101e:	d1 1c       	adc	r13, r1
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	99 23       	and	r25, r25
    1024:	29 f0       	breq	.+10     	; 0x1030 <dtoa_prf+0x130>
    1026:	d6 01       	movw	r26, r12
    1028:	9c 93       	st	X, r25
    102a:	f6 01       	movw	r30, r12
    102c:	31 96       	adiw	r30, 0x01	; 1
    102e:	6f 01       	movw	r12, r30
    1030:	c6 01       	movw	r24, r12
    1032:	03 96       	adiw	r24, 0x03	; 3
    1034:	e2 fe       	sbrs	r14, 2
    1036:	0b c0       	rjmp	.+22     	; 0x104e <dtoa_prf+0x14e>
    1038:	39 e4       	ldi	r19, 0x49	; 73
    103a:	d6 01       	movw	r26, r12
    103c:	3c 93       	st	X, r19
    103e:	3e e4       	ldi	r19, 0x4E	; 78
    1040:	11 96       	adiw	r26, 0x01	; 1
    1042:	3c 93       	st	X, r19
    1044:	11 97       	sbiw	r26, 0x01	; 1
    1046:	36 e4       	ldi	r19, 0x46	; 70
    1048:	12 96       	adiw	r26, 0x02	; 2
    104a:	3c 93       	st	X, r19
    104c:	07 c0       	rjmp	.+14     	; 0x105c <dtoa_prf+0x15c>
    104e:	39 e6       	ldi	r19, 0x69	; 105
    1050:	f6 01       	movw	r30, r12
    1052:	30 83       	st	Z, r19
    1054:	3e e6       	ldi	r19, 0x6E	; 110
    1056:	31 83       	std	Z+1, r19	; 0x01
    1058:	36 e6       	ldi	r19, 0x66	; 102
    105a:	32 83       	std	Z+2, r19	; 0x02
    105c:	fc 01       	movw	r30, r24
    105e:	32 2f       	mov	r19, r18
    1060:	40 e2       	ldi	r20, 0x20	; 32
    1062:	33 23       	and	r19, r19
    1064:	19 f0       	breq	.+6      	; 0x106c <dtoa_prf+0x16c>
    1066:	41 93       	st	Z+, r20
    1068:	31 50       	subi	r19, 0x01	; 1
    106a:	fb cf       	rjmp	.-10     	; 0x1062 <dtoa_prf+0x162>
    106c:	fc 01       	movw	r30, r24
    106e:	e2 0f       	add	r30, r18
    1070:	f1 1d       	adc	r31, r1
    1072:	10 82       	st	Z, r1
    1074:	8e ef       	ldi	r24, 0xFE	; 254
    1076:	9f ef       	ldi	r25, 0xFF	; 255
    1078:	a6 c0       	rjmp	.+332    	; 0x11c6 <dtoa_prf+0x2c6>
    107a:	21 e0       	ldi	r18, 0x01	; 1
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	91 11       	cpse	r25, r1
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <dtoa_prf+0x186>
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	16 16       	cp	r1, r22
    1088:	17 06       	cpc	r1, r23
    108a:	1c f4       	brge	.+6      	; 0x1092 <dtoa_prf+0x192>
    108c:	fb 01       	movw	r30, r22
    108e:	31 96       	adiw	r30, 0x01	; 1
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <dtoa_prf+0x196>
    1092:	e1 e0       	ldi	r30, 0x01	; 1
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	2e 0f       	add	r18, r30
    1098:	3f 1f       	adc	r19, r31
    109a:	bb 20       	and	r11, r11
    109c:	21 f0       	breq	.+8      	; 0x10a6 <dtoa_prf+0x1a6>
    109e:	eb 2d       	mov	r30, r11
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	31 96       	adiw	r30, 0x01	; 1
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <dtoa_prf+0x1aa>
    10a6:	e0 e0       	ldi	r30, 0x00	; 0
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	2e 0f       	add	r18, r30
    10ac:	3f 1f       	adc	r19, r31
    10ae:	e1 2f       	mov	r30, r17
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	2e 17       	cp	r18, r30
    10b4:	3f 07       	cpc	r19, r31
    10b6:	1c f4       	brge	.+6      	; 0x10be <dtoa_prf+0x1be>
    10b8:	12 1b       	sub	r17, r18
    10ba:	21 2f       	mov	r18, r17
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <dtoa_prf+0x1c0>
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	8e 2d       	mov	r24, r14
    10c2:	88 71       	andi	r24, 0x18	; 24
    10c4:	59 f4       	brne	.+22     	; 0x10dc <dtoa_prf+0x1dc>
    10c6:	f6 01       	movw	r30, r12
    10c8:	82 2f       	mov	r24, r18
    10ca:	30 e2       	ldi	r19, 0x20	; 32
    10cc:	88 23       	and	r24, r24
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <dtoa_prf+0x1d6>
    10d0:	31 93       	st	Z+, r19
    10d2:	81 50       	subi	r24, 0x01	; 1
    10d4:	fb cf       	rjmp	.-10     	; 0x10cc <dtoa_prf+0x1cc>
    10d6:	c2 0e       	add	r12, r18
    10d8:	d1 1c       	adc	r13, r1
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	99 23       	and	r25, r25
    10de:	29 f0       	breq	.+10     	; 0x10ea <dtoa_prf+0x1ea>
    10e0:	d6 01       	movw	r26, r12
    10e2:	9c 93       	st	X, r25
    10e4:	f6 01       	movw	r30, r12
    10e6:	31 96       	adiw	r30, 0x01	; 1
    10e8:	6f 01       	movw	r12, r30
    10ea:	51 11       	cpse	r21, r1
    10ec:	0b c0       	rjmp	.+22     	; 0x1104 <dtoa_prf+0x204>
    10ee:	f6 01       	movw	r30, r12
    10f0:	82 2f       	mov	r24, r18
    10f2:	90 e3       	ldi	r25, 0x30	; 48
    10f4:	88 23       	and	r24, r24
    10f6:	19 f0       	breq	.+6      	; 0x10fe <dtoa_prf+0x1fe>
    10f8:	91 93       	st	Z+, r25
    10fa:	81 50       	subi	r24, 0x01	; 1
    10fc:	fb cf       	rjmp	.-10     	; 0x10f4 <dtoa_prf+0x1f4>
    10fe:	c2 0e       	add	r12, r18
    1100:	d1 1c       	adc	r13, r1
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	0f 2d       	mov	r16, r15
    1106:	06 0f       	add	r16, r22
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	34 2f       	mov	r19, r20
    110c:	30 71       	andi	r19, 0x10	; 16
    110e:	44 ff       	sbrs	r20, 4
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <dtoa_prf+0x218>
    1112:	91 33       	cpi	r25, 0x31	; 49
    1114:	09 f4       	brne	.+2      	; 0x1118 <dtoa_prf+0x218>
    1116:	01 50       	subi	r16, 0x01	; 1
    1118:	10 16       	cp	r1, r16
    111a:	24 f4       	brge	.+8      	; 0x1124 <dtoa_prf+0x224>
    111c:	09 30       	cpi	r16, 0x09	; 9
    111e:	18 f0       	brcs	.+6      	; 0x1126 <dtoa_prf+0x226>
    1120:	08 e0       	ldi	r16, 0x08	; 8
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <dtoa_prf+0x226>
    1124:	01 e0       	ldi	r16, 0x01	; 1
    1126:	ab 01       	movw	r20, r22
    1128:	77 ff       	sbrs	r23, 7
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <dtoa_prf+0x230>
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	fb 01       	movw	r30, r22
    1132:	e4 1b       	sub	r30, r20
    1134:	f5 0b       	sbc	r31, r21
    1136:	a1 e0       	ldi	r26, 0x01	; 1
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ac 0f       	add	r26, r28
    113c:	bd 1f       	adc	r27, r29
    113e:	ea 0f       	add	r30, r26
    1140:	fb 1f       	adc	r31, r27
    1142:	8e e2       	ldi	r24, 0x2E	; 46
    1144:	a8 2e       	mov	r10, r24
    1146:	4b 01       	movw	r8, r22
    1148:	80 1a       	sub	r8, r16
    114a:	91 08       	sbc	r9, r1
    114c:	0b 2d       	mov	r16, r11
    114e:	10 e0       	ldi	r17, 0x00	; 0
    1150:	11 95       	neg	r17
    1152:	01 95       	neg	r16
    1154:	11 09       	sbc	r17, r1
    1156:	4f 3f       	cpi	r20, 0xFF	; 255
    1158:	bf ef       	ldi	r27, 0xFF	; 255
    115a:	5b 07       	cpc	r21, r27
    115c:	21 f4       	brne	.+8      	; 0x1166 <dtoa_prf+0x266>
    115e:	d6 01       	movw	r26, r12
    1160:	ac 92       	st	X, r10
    1162:	11 96       	adiw	r26, 0x01	; 1
    1164:	6d 01       	movw	r12, r26
    1166:	64 17       	cp	r22, r20
    1168:	75 07       	cpc	r23, r21
    116a:	2c f0       	brlt	.+10     	; 0x1176 <dtoa_prf+0x276>
    116c:	84 16       	cp	r8, r20
    116e:	95 06       	cpc	r9, r21
    1170:	14 f4       	brge	.+4      	; 0x1176 <dtoa_prf+0x276>
    1172:	81 81       	ldd	r24, Z+1	; 0x01
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <dtoa_prf+0x278>
    1176:	80 e3       	ldi	r24, 0x30	; 48
    1178:	41 50       	subi	r20, 0x01	; 1
    117a:	51 09       	sbc	r21, r1
    117c:	31 96       	adiw	r30, 0x01	; 1
    117e:	d6 01       	movw	r26, r12
    1180:	11 96       	adiw	r26, 0x01	; 1
    1182:	7d 01       	movw	r14, r26
    1184:	40 17       	cp	r20, r16
    1186:	51 07       	cpc	r21, r17
    1188:	24 f0       	brlt	.+8      	; 0x1192 <dtoa_prf+0x292>
    118a:	d6 01       	movw	r26, r12
    118c:	8c 93       	st	X, r24
    118e:	67 01       	movw	r12, r14
    1190:	e2 cf       	rjmp	.-60     	; 0x1156 <dtoa_prf+0x256>
    1192:	64 17       	cp	r22, r20
    1194:	75 07       	cpc	r23, r21
    1196:	39 f4       	brne	.+14     	; 0x11a6 <dtoa_prf+0x2a6>
    1198:	96 33       	cpi	r25, 0x36	; 54
    119a:	20 f4       	brcc	.+8      	; 0x11a4 <dtoa_prf+0x2a4>
    119c:	95 33       	cpi	r25, 0x35	; 53
    119e:	19 f4       	brne	.+6      	; 0x11a6 <dtoa_prf+0x2a6>
    11a0:	31 11       	cpse	r19, r1
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <dtoa_prf+0x2a6>
    11a4:	81 e3       	ldi	r24, 0x31	; 49
    11a6:	f6 01       	movw	r30, r12
    11a8:	80 83       	st	Z, r24
    11aa:	f7 01       	movw	r30, r14
    11ac:	82 2f       	mov	r24, r18
    11ae:	90 e2       	ldi	r25, 0x20	; 32
    11b0:	88 23       	and	r24, r24
    11b2:	19 f0       	breq	.+6      	; 0x11ba <dtoa_prf+0x2ba>
    11b4:	91 93       	st	Z+, r25
    11b6:	81 50       	subi	r24, 0x01	; 1
    11b8:	fb cf       	rjmp	.-10     	; 0x11b0 <dtoa_prf+0x2b0>
    11ba:	f7 01       	movw	r30, r14
    11bc:	e2 0f       	add	r30, r18
    11be:	f1 1d       	adc	r31, r1
    11c0:	10 82       	st	Z, r1
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	29 96       	adiw	r28, 0x09	; 9
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	cf 90       	pop	r12
    11e2:	bf 90       	pop	r11
    11e4:	af 90       	pop	r10
    11e6:	9f 90       	pop	r9
    11e8:	8f 90       	pop	r8
    11ea:	08 95       	ret

000011ec <__ftoa_engine>:
    11ec:	28 30       	cpi	r18, 0x08	; 8
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <__ftoa_engine+0x6>
    11f0:	27 e0       	ldi	r18, 0x07	; 7
    11f2:	33 27       	eor	r19, r19
    11f4:	da 01       	movw	r26, r20
    11f6:	99 0f       	add	r25, r25
    11f8:	31 1d       	adc	r19, r1
    11fa:	87 fd       	sbrc	r24, 7
    11fc:	91 60       	ori	r25, 0x01	; 1
    11fe:	00 96       	adiw	r24, 0x00	; 0
    1200:	61 05       	cpc	r22, r1
    1202:	71 05       	cpc	r23, r1
    1204:	39 f4       	brne	.+14     	; 0x1214 <__ftoa_engine+0x28>
    1206:	32 60       	ori	r19, 0x02	; 2
    1208:	2e 5f       	subi	r18, 0xFE	; 254
    120a:	3d 93       	st	X+, r19
    120c:	30 e3       	ldi	r19, 0x30	; 48
    120e:	2a 95       	dec	r18
    1210:	e1 f7       	brne	.-8      	; 0x120a <__ftoa_engine+0x1e>
    1212:	08 95       	ret
    1214:	9f 3f       	cpi	r25, 0xFF	; 255
    1216:	30 f0       	brcs	.+12     	; 0x1224 <__ftoa_engine+0x38>
    1218:	80 38       	cpi	r24, 0x80	; 128
    121a:	71 05       	cpc	r23, r1
    121c:	61 05       	cpc	r22, r1
    121e:	09 f0       	breq	.+2      	; 0x1222 <__ftoa_engine+0x36>
    1220:	3c 5f       	subi	r19, 0xFC	; 252
    1222:	3c 5f       	subi	r19, 0xFC	; 252
    1224:	3d 93       	st	X+, r19
    1226:	91 30       	cpi	r25, 0x01	; 1
    1228:	08 f0       	brcs	.+2      	; 0x122c <__ftoa_engine+0x40>
    122a:	80 68       	ori	r24, 0x80	; 128
    122c:	91 1d       	adc	r25, r1
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	1f 93       	push	r17
    1234:	0f 93       	push	r16
    1236:	ff 92       	push	r15
    1238:	ef 92       	push	r14
    123a:	19 2f       	mov	r17, r25
    123c:	98 7f       	andi	r25, 0xF8	; 248
    123e:	96 95       	lsr	r25
    1240:	e9 2f       	mov	r30, r25
    1242:	96 95       	lsr	r25
    1244:	96 95       	lsr	r25
    1246:	e9 0f       	add	r30, r25
    1248:	ff 27       	eor	r31, r31
    124a:	ea 51       	subi	r30, 0x1A	; 26
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	99 27       	eor	r25, r25
    1250:	33 27       	eor	r19, r19
    1252:	ee 24       	eor	r14, r14
    1254:	ff 24       	eor	r15, r15
    1256:	a7 01       	movw	r20, r14
    1258:	e7 01       	movw	r28, r14
    125a:	05 90       	lpm	r0, Z+
    125c:	08 94       	sec
    125e:	07 94       	ror	r0
    1260:	28 f4       	brcc	.+10     	; 0x126c <__ftoa_engine+0x80>
    1262:	36 0f       	add	r19, r22
    1264:	e7 1e       	adc	r14, r23
    1266:	f8 1e       	adc	r15, r24
    1268:	49 1f       	adc	r20, r25
    126a:	51 1d       	adc	r21, r1
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	88 1f       	adc	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	06 94       	lsr	r0
    1276:	a1 f7       	brne	.-24     	; 0x1260 <__ftoa_engine+0x74>
    1278:	05 90       	lpm	r0, Z+
    127a:	07 94       	ror	r0
    127c:	28 f4       	brcc	.+10     	; 0x1288 <__ftoa_engine+0x9c>
    127e:	e7 0e       	add	r14, r23
    1280:	f8 1e       	adc	r15, r24
    1282:	49 1f       	adc	r20, r25
    1284:	56 1f       	adc	r21, r22
    1286:	c1 1d       	adc	r28, r1
    1288:	77 0f       	add	r23, r23
    128a:	88 1f       	adc	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	66 1f       	adc	r22, r22
    1290:	06 94       	lsr	r0
    1292:	a1 f7       	brne	.-24     	; 0x127c <__ftoa_engine+0x90>
    1294:	05 90       	lpm	r0, Z+
    1296:	07 94       	ror	r0
    1298:	28 f4       	brcc	.+10     	; 0x12a4 <__ftoa_engine+0xb8>
    129a:	f8 0e       	add	r15, r24
    129c:	49 1f       	adc	r20, r25
    129e:	56 1f       	adc	r21, r22
    12a0:	c7 1f       	adc	r28, r23
    12a2:	d1 1d       	adc	r29, r1
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	66 1f       	adc	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	06 94       	lsr	r0
    12ae:	a1 f7       	brne	.-24     	; 0x1298 <__ftoa_engine+0xac>
    12b0:	05 90       	lpm	r0, Z+
    12b2:	07 94       	ror	r0
    12b4:	20 f4       	brcc	.+8      	; 0x12be <__ftoa_engine+0xd2>
    12b6:	49 0f       	add	r20, r25
    12b8:	56 1f       	adc	r21, r22
    12ba:	c7 1f       	adc	r28, r23
    12bc:	d8 1f       	adc	r29, r24
    12be:	99 0f       	add	r25, r25
    12c0:	66 1f       	adc	r22, r22
    12c2:	77 1f       	adc	r23, r23
    12c4:	88 1f       	adc	r24, r24
    12c6:	06 94       	lsr	r0
    12c8:	a9 f7       	brne	.-22     	; 0x12b4 <__ftoa_engine+0xc8>
    12ca:	84 91       	lpm	r24, Z
    12cc:	10 95       	com	r17
    12ce:	17 70       	andi	r17, 0x07	; 7
    12d0:	41 f0       	breq	.+16     	; 0x12e2 <__ftoa_engine+0xf6>
    12d2:	d6 95       	lsr	r29
    12d4:	c7 95       	ror	r28
    12d6:	57 95       	ror	r21
    12d8:	47 95       	ror	r20
    12da:	f7 94       	ror	r15
    12dc:	e7 94       	ror	r14
    12de:	1a 95       	dec	r17
    12e0:	c1 f7       	brne	.-16     	; 0x12d2 <__ftoa_engine+0xe6>
    12e2:	ec e8       	ldi	r30, 0x8C	; 140
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	68 94       	set
    12e8:	15 90       	lpm	r1, Z+
    12ea:	15 91       	lpm	r17, Z+
    12ec:	35 91       	lpm	r19, Z+
    12ee:	65 91       	lpm	r22, Z+
    12f0:	95 91       	lpm	r25, Z+
    12f2:	05 90       	lpm	r0, Z+
    12f4:	7f e2       	ldi	r23, 0x2F	; 47
    12f6:	73 95       	inc	r23
    12f8:	e1 18       	sub	r14, r1
    12fa:	f1 0a       	sbc	r15, r17
    12fc:	43 0b       	sbc	r20, r19
    12fe:	56 0b       	sbc	r21, r22
    1300:	c9 0b       	sbc	r28, r25
    1302:	d0 09       	sbc	r29, r0
    1304:	c0 f7       	brcc	.-16     	; 0x12f6 <__ftoa_engine+0x10a>
    1306:	e1 0c       	add	r14, r1
    1308:	f1 1e       	adc	r15, r17
    130a:	43 1f       	adc	r20, r19
    130c:	56 1f       	adc	r21, r22
    130e:	c9 1f       	adc	r28, r25
    1310:	d0 1d       	adc	r29, r0
    1312:	7e f4       	brtc	.+30     	; 0x1332 <__ftoa_engine+0x146>
    1314:	70 33       	cpi	r23, 0x30	; 48
    1316:	11 f4       	brne	.+4      	; 0x131c <__ftoa_engine+0x130>
    1318:	8a 95       	dec	r24
    131a:	e6 cf       	rjmp	.-52     	; 0x12e8 <__ftoa_engine+0xfc>
    131c:	e8 94       	clt
    131e:	01 50       	subi	r16, 0x01	; 1
    1320:	30 f0       	brcs	.+12     	; 0x132e <__ftoa_engine+0x142>
    1322:	08 0f       	add	r16, r24
    1324:	0a f4       	brpl	.+2      	; 0x1328 <__ftoa_engine+0x13c>
    1326:	00 27       	eor	r16, r16
    1328:	02 17       	cp	r16, r18
    132a:	08 f4       	brcc	.+2      	; 0x132e <__ftoa_engine+0x142>
    132c:	20 2f       	mov	r18, r16
    132e:	23 95       	inc	r18
    1330:	02 2f       	mov	r16, r18
    1332:	7a 33       	cpi	r23, 0x3A	; 58
    1334:	28 f0       	brcs	.+10     	; 0x1340 <__ftoa_engine+0x154>
    1336:	79 e3       	ldi	r23, 0x39	; 57
    1338:	7d 93       	st	X+, r23
    133a:	2a 95       	dec	r18
    133c:	e9 f7       	brne	.-6      	; 0x1338 <__ftoa_engine+0x14c>
    133e:	10 c0       	rjmp	.+32     	; 0x1360 <__ftoa_engine+0x174>
    1340:	7d 93       	st	X+, r23
    1342:	2a 95       	dec	r18
    1344:	89 f6       	brne	.-94     	; 0x12e8 <__ftoa_engine+0xfc>
    1346:	06 94       	lsr	r0
    1348:	97 95       	ror	r25
    134a:	67 95       	ror	r22
    134c:	37 95       	ror	r19
    134e:	17 95       	ror	r17
    1350:	17 94       	ror	r1
    1352:	e1 18       	sub	r14, r1
    1354:	f1 0a       	sbc	r15, r17
    1356:	43 0b       	sbc	r20, r19
    1358:	56 0b       	sbc	r21, r22
    135a:	c9 0b       	sbc	r28, r25
    135c:	d0 09       	sbc	r29, r0
    135e:	98 f0       	brcs	.+38     	; 0x1386 <__ftoa_engine+0x19a>
    1360:	23 95       	inc	r18
    1362:	7e 91       	ld	r23, -X
    1364:	73 95       	inc	r23
    1366:	7a 33       	cpi	r23, 0x3A	; 58
    1368:	08 f0       	brcs	.+2      	; 0x136c <__ftoa_engine+0x180>
    136a:	70 e3       	ldi	r23, 0x30	; 48
    136c:	7c 93       	st	X, r23
    136e:	20 13       	cpse	r18, r16
    1370:	b8 f7       	brcc	.-18     	; 0x1360 <__ftoa_engine+0x174>
    1372:	7e 91       	ld	r23, -X
    1374:	70 61       	ori	r23, 0x10	; 16
    1376:	7d 93       	st	X+, r23
    1378:	30 f0       	brcs	.+12     	; 0x1386 <__ftoa_engine+0x19a>
    137a:	83 95       	inc	r24
    137c:	71 e3       	ldi	r23, 0x31	; 49
    137e:	7d 93       	st	X+, r23
    1380:	70 e3       	ldi	r23, 0x30	; 48
    1382:	2a 95       	dec	r18
    1384:	e1 f7       	brne	.-8      	; 0x137e <__ftoa_engine+0x192>
    1386:	11 24       	eor	r1, r1
    1388:	ef 90       	pop	r14
    138a:	ff 90       	pop	r15
    138c:	0f 91       	pop	r16
    138e:	1f 91       	pop	r17
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	99 27       	eor	r25, r25
    1396:	87 fd       	sbrc	r24, 7
    1398:	90 95       	com	r25
    139a:	08 95       	ret

0000139c <_exit>:
    139c:	f8 94       	cli

0000139e <__stop_program>:
    139e:	ff cf       	rjmp	.-2      	; 0x139e <__stop_program>
